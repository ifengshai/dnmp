<?php

namespace app\admin\controller;

use app\admin\model\itemmanage\Item;
use app\admin\model\itemmanage\ItemPlatformSku;
use app\admin\model\warehouse\ProductBarCodeItem;
use app\common\controller\Backend;
use think\Db;
use FacebookAds\Api;
use FacebookAds\Object\Campaign;
use app\admin\model\financial\Fackbook;
use fast\Excel;

class Wangpenglei extends Backend
{

    protected $noNeedLogin = ['*'];

    public function _initialize()
    {
        parent::_initialize();
        $this->zeelool = new \app\admin\model\order\order\Zeelool();

        $this->facebook = Fackbook::where('platform', 1)->find();
        $this->app_id = $this->facebook->app_id;
        $this->app_secret = $this->facebook->app_secret;
        $this->access_token = $this->facebook->access_token;
        $this->accounts = $this->facebook->accounts;
    }

    public function select_sku()
    {
        $itemPlatformSku = new ItemPlatformSku();
        $productbarcodeitem = new ProductBarCodeItem();
        $skus = $itemPlatformSku
            ->where('platform_sku', 'in', [
                'Acc-05',
                'ACC451837-01',
                'ACC451837-02',
                'ACC854841-01',
                'CH142585-01',
                'DI151559-03',
                'DO662371-01',
                'E20034-1',
                'E20038-1',
                'EM6015-01',
                'ER039871-01',
                'ER387673-02',
                'FA0742-01',
                'FM0125-01',
                'FM0125-04',
                'FP0044-02',
                'FP0044-03',
                'FP0300-01',
                'FP0662-04',
                'FP0668-01',
                'FP0668-02',
                'FP0668-07',
                'FP0668-08',
                'FP0669-05',
                'FP0886-01',
                'FX0052-01',
                'FX0206-01',
                'FX0206-07',
                'FX0239-03',
                'GlassesPocket-02',
                'GM241791-01',
                'NBY002-1',
                'OA01585-01',
                'OA01776-04',
                'OA01858-02',
                'OA01858-06',
                'OA01866-01',
                'OA01968-02',
                'OA766129-02',
                'OA968085-02',
                'OI016350-02',
                'OI611693-01',
                'OM749624-02',
                'OM749624-03',
                'OM777679-01',
                'OM777679-02',
                'OM777679-03',
                'OM777679-04',
                'OM777679-05',
                'OM777679-06',
                'OM777679-07',
                'OM777679-08',
                'OM777679-09',
                'OM777679-10',
                'OM777679-11',
                'OM777679-12',
                'OM777679-13',
                'OM777679-14',
                'OP008617-01',
                'OP016615-02',
                'OP01860-04',
                'OP01884-01',
                'OP01884-03',
                'OP01884-04',
                'OP01887-02',
                'OP01887-04',
                'OP01892-02',
                'OP01899-01',
                'OP01899-02',
                'OP01934-01',
                'OP01934-02',
                'OP01956-05',
                'OP02010-03',
                'OP02098-02',
                'OP02126-01',
                'OP02126-02',
                'OP02129-01',
                'OP02131-01',
                'OP02131-02',
                'OP049594-01',
                'OP054962-06',
                'OP226540-01',
                'OP226540-05',
                'OP239668-02',
                'OP432631-03',
                'OP597259-03',
                'OP598243-01',
                'OP791268-02',
                'OT01978-02',
                'OT02018-01',
                'OT02018-03',
                'OT02084-01',
                'OT066274-01',
                'OT066274-02',
                'OT157359-01',
                'OT524812-02',
                'OT652438-01',
                'OT652438-02',
                'OX028291-05',
                'OX038277-01',
                'OX038277-02',
                'OX038277-03',
                'OX038277-04',
                'OX078897-01',
                'OX084225-01',
                'OX331639-02',
                'OX509596-01',
                'OX616570-02',
                'OX684861-04',
                'OX722015-01',
                'OX722015-02',
                'OX722015-03',
                'OX722015-04',
                'OX722015-05',
                'OX722015-06',
                'OX727451-01',
                'OX727451-02',
                'OX739865-01',
                'OX739865-02',
                'OX739865-04',
                'OX739865-05',
                'OX739865-06',
                'OX842688-03',
                'TM001463-02',
                'TM015293-01',
                'TM080384-03',
                'TM151666-01',
                'TT028138-01',
                'TT123484-02',
                'TT265225-02',
                'TT993528-01',
                'TT993528-02',
                'TT993528-03',
                'TT993528-04',
                'TX531583-03',
                'TX784042-03',
                'TX898397-03',
                'VFP0116-01',
                'VFP0236-01',
                'VFP0255-01',
                'VFP0255-02',
                'VFP0255-03',
                'VFP0270-01',
                'VFP0270-04',
                'VFP0274-03',
                'VFP0290-06',
                'VFP0290-07',
                'VFP0306-01',
                'VFP0306-02',
                'VFP0306-03',
                'VFP0306-14',
                'VFP0306-15',
                'VFT0269-02',
                'VFT0269-03',
                'VFT0271-01',
                'VFX0060-03',
                'VHP0189-01',
                'WA012457-04',
                'WA01753-03',
                'WA082846-02',
                'WA233799-04',
                'WA258752-02',
                'WA258752-05',
                'WA414262-06',
                'WA456693-03',
                'WA581464-03',
                'WA906730-02',
                'WO626691-04',
                'ZX0923-05'
            ])
            ->field('sku')
            ->group('sku')
            ->select();
        $skus = collection($skus)->toArray();
        $arr = [
            'ACC06052-01',
            'ACC208367-01',
            'ACC6013-01',
            'ACC628151-02',
            'CH521292-01',
            'Chain-G05',
            'DM473233-07',
            'DP784598-02',
            'ER081175-01',
            'ER092586-01',
            'ER495319-01',
            'ER5012-01',
            'ER5032-01',
            'FM0361-01',
            'FP0044-08',
            'FX0685-03',
            'FX0689-01',
            'FX0757-02',
            'OA01499-03',
            'OA01834-01',
            'OA01995-01',
            'OA02008-01',
            'OI815956-02',
            'OM01473-02',
            'OM02024-02',
            'OM469870-01',
            'OM935234-01',
            'OP01912-06',
            'OP02048-03',
            'OP233677-03',
            'OP302058-01',
            'OP313158-03',
            'OP336618-05',
            'OP432631-01',
            'OP527327-01',
            'OP527327-03',
            'OP765682-02',
            'OT01580-01',
            'OT01580-02',
            'OT018229-01',
            'OT018229-02',
            'OT018229-03',
            'OT092185-01',
            'OT092477-07',
            'OW01844-01',
            'OX01878-02',
            'OX01969-02',
            'OX059051-02',
            'OX259645-01',
            'OX739865-03',
            'SA01119-01',
            'SA941431-05',
            'SX0019-03',
            'SX0019-04',
            'SX0019-06',
            'TX225717-02',
            'VFP0158-04',
            'VFP0166-01',
            'VFP0188-01',
            'VFP0236-03',
            'VFP0263-01',
            'VHP0189-04',
            'VHP0189-07',
            'WA01654-03',
            'WA01701-01',
            'WA062782-03',
            'WA106882-03',
            'WA135389-01',
            'WA192071-05',
            'WA245023-03',
            'WA609979-04',
            'WA609979-05',
            'WA729538-01',
            'WA885863-01',
            'WX701721-03',
            'XT417734-01',
            'ZP0940-01',
            'Acc-05',
            'ACC451837-02',
            'ACC854841-01',
            'DI151559-03',
            'DO662371-01',
            'E20034-1',
            'E20038-1',
            'EM6015-01',
            'ER039871-01',
            'ER387673-02',
            'FA0742-01',
            'FM0125-01',
            'FM0125-04',
            'FP0044-02',
            'FP0044-03',
            'FP0300-01',
            'FP0662-04',
            'FP0668-01',
            'FP0668-02',
            'FP0668-07',
            'FP0668-08',
            'FP0886-01',
            'FX0206-01',
            'FX0206-07',
            'FX0239-03',
            'GlassesPocket-02',
            'GM241791-01',
            'OA01585-01',
            'OA01776-04',
            'OA01858-02',
            'OA01858-06',
            'OA01866-01',
            'OA01968-02',
            'OA766129-02',
            'OA968085-02',
            'OI016350-02',
            'OI611693-01',
            'OM749624-02',
            'OM749624-03',
            'OM777679-01',
            'OM777679-02',
            'OM777679-03',
            'OM777679-04',
            'OM777679-05',
            'OM777679-06',
            'OM777679-07',
            'OM777679-08',
            'OM777679-09',
            'OM777679-10',
            'OM777679-11',
            'OM777679-12',
            'OM777679-13',
            'OM777679-14',
            'OP008617-01',
            'OP016615-02',
            'OP01860-04',
            'OP01884-01',
            'OP01884-03',
            'OP01884-04',
            'OP01887-02',
            'OP01887-04',
            'OP01892-02',
            'OP01899-01',
            'OP01899-02',
            'OP01934-01',
            'OP01934-02',
            'OP01956-05',
            'OP02010-03',
            'OP02098-02',
            'OP02126-01',
            'OP02129-01',
            'OP02131-01',
            'OP049594-01',
            'OP054962-06',
            'OP226540-01',
            'OP226540-05',
            'OP239668-02',
            'OP432631-03',
            'OP597259-03',
            'OP598243-01',
            'OP791268-02',
            'OT01978-02',
            'OT02018-01',
            'OT02018-03',
            'OT02084-01',
            'OT066274-01',
            'OT066274-02',
            'OT157359-01',
            'OT524812-02',
            'OT652438-01',
            'OT652438-02',
            'OX028291-05',
            'OX038277-01',
            'OX038277-02',
            'OX038277-03',
            'OX038277-04',
            'OX078897-01',
            'OX084225-01',
            'OX331639-02',
            'OX509596-01',
            'OX684861-04',
            'OX722015-01',
            'OX722015-02',
            'OX722015-03',
            'OX722015-04',
            'OX722015-05',
            'OX722015-06',
            'OX727451-01',
            'OX727451-02',
            'OX739865-01',
            'OX739865-02',
            'OX739865-04',
            'OX739865-05',
            'OX739865-06',
            'OX842688-03',
            'TM001463-02',
            'TM015293-01',
            'TM080384-03',
            'TM151666-01',
            'TT028138-01',
            'TT123484-02',
            'TT265225-02',
            'TT993528-01',
            'TT993528-02',
            'TT993528-03',
            'TT993528-04',
            'TX531583-03',
            'TX784042-03',
            'TX898397-03',
            'VFP0116-01',
            'VFP0236-01',
            'VFP0255-01',
            'VFP0255-02',
            'VFP0255-03',
            'VFP0270-01',
            'VFP0270-04',
            'VFP0274-03',
            'VFP0290-06',
            'VFP0290-07',
            'VFP0306-01',
            'VFP0306-02',
            'VFP0306-03',
            'VFP0306-14',
            'VFP0306-15',
            'VFT0269-02',
            'VFT0269-03',
            'VFT0271-01',
            'VFX0060-03',
            'VHP0189-01',
            'WA012457-04',
            'WA082846-02',
            'WA258752-02',
            'WA258752-05',
            'WA414262-06',
            'WA456693-03',
            'WA581464-03',
            'WA906730-02',
            'WO626691-04',
            'ZX0923-05'
        ];
        $arr = ['ACC004015-01',
            'Acc-02',
            'ACC06051-01',
            'ACC085213-01',
            'ACC085213-03',
            'ACC085213-04',
            'ACC166659-01',
            'ACC202759-04',
            'ACC229278-01',
            'ACC451837-01',
            'ACC566389-01',
            'ACC6030-02',
            'ACC6032-01',
            'ACC6039-01',
            'ACC6041-01',
            'ACC652340-01',
            'ACC683432-01',
            'ACC823380-01',
            'ACC949930-06',
            'ACC949930-08',
            'B30003-1',
            'BL125448-02',
            'Box',
            'Bracelet-01',
            'Bracelet-02',
            'CH057094-01',
            'CH101551-01',
            'CH139311-05',
            'CH142585-01',
            'CH579218-01',
            'CH6055-01',
            'CH6056-01',
            'CH672798-04',
            'CH672798-06',
            'CH761138-01',
            'CH865975-01',
            'Chain-02',
            'Chain-03',
            'Chain-09',
            'Chain-10',
            'Chain-11',
            'Chain-G03',
            'DA022366-01',
            'DA041413-03',
            'DA054086-02',
            'DA162085-01',
            'DA275259-01',
            'DA275259-04',
            'DA319718-01',
            'DA385610-01',
            'DA385610-02',
            'DA385610-03',
            'DA385610-05',
            'DA403394-01',
            'DA403394-02',
            'DA424185-04',
            'DA452547-01',
            'DA452547-02',
            'DA458672-01',
            'DA458672-02',
            'DA458672-03',
            'DA458672-04',
            'DA519297-01',
            'DA519297-02',
            'DA519297-04',
            'DA556215-02',
            'DA563636-03',
            'DA565519-01',
            'DA565519-02',
            'DA656343-02',
            'DA656343-03',
            'DA656343-04',
            'DA656546-01',
            'DA775673-01',
            'DA798761-01',
            'DA798761-02',
            'DA869112-01',
            'DA869112-02',
            'DA883067-02',
            'DA934054-01',
            'DA934054-02',
            'DA934054-04',
            'DA934054-05',
            'DI013744-01',
            'DI013744-02',
            'DI025760-01',
            'DI038215-01',
            'DI046658-02',
            'DI046658-03',
            'DI048277-01',
            'DI048277-02',
            'DI072199-01',
            'DI072199-02',
            'DI139853-02',
            'DI151559-02',
            'DI151785-01',
            'DI216878-01',
            'DI216878-02',
            'DI257739-01',
            'DI257739-02',
            'DI257739-03',
            'DI322614-01',
            'DI359079-01',
            'DI359079-02',
            'DI359079-03',
            'DI656279-01',
            'DI656279-02',
            'DI656279-03',
            'DI765717-01',
            'DI765717-02',
            'DI906936-01',
            'DI906936-02',
            'DI906936-03',
            'DI951485-01',
            'DM003197-01',
            'DM044882-01',
            'DM044882-02',
            'DM064241-01',
            'DM090658-01',
            'DM144567-01',
            'DM144567-02',
            'DM268791-01',
            'DM279485-01',
            'DM332599-01',
            'DM332599-02',
            'DM332599-03',
            'DM332599-04',
            'DM461937-01',
            'DM473233-01',
            'DM473233-02',
            'DM473233-03',
            'DM473233-04',
            'DM473233-05',
            'DM473233-06',
            'DM516383-03',
            'DM535395-01',
            'DM568185-01',
            'DM568185-02',
            'DM585361-01',
            'DM625810-01',
            'DM654940-01',
            'DM769795-01',
            'DM997471-01',
            'DP026464-01',
            'DP026464-02',
            'DP026464-03',
            'DP026464-04',
            'DP242030-01',
            'DP383759-01',
            'DP605639-01',
            'DP784598-01',
            'DP784598-03',
            'DP805913-01',
            'DP805913-02',
            'DP805913-03',
            'DP805913-04',
            'DP923190-01',
            'DT019440-01',
            'DT019440-02',
            'DT019440-03',
            'DT019440-04',
            'DT027351-01',
            'DT027351-02',
            'DT099269-01',
            'DT099269-02',
            'DT099269-03',
            'DT203887-01',
            'DT203887-02',
            'DT498487-01',
            'DT498487-02',
            'DT498487-03',
            'DT536642-01',
            'DT536642-02',
            'DT536642-03',
            'DT547282-01',
            'DT547282-02',
            'DT547282-03',
            'DT642481-01',
            'DT642481-02',
            'DT642481-03',
            'DT666623-02',
            'DT829273-01',
            'DT829273-02',
            'DX002816-01',
            'DX002816-02',
            'DX002816-03',
            'DX052460-01',
            'DX052460-02',
            'DX052460-03',
            'DX052460-04',
            'DX052460-05',
            'DX064287-01',
            'DX069066-01',
            'DX261370-03',
            'DX594736-01',
            'DX594736-02',
            'DX595884-02',
            'DX595884-03',
            'DX619533-02',
            'DX883751-02',
            'E10066-1',
            'E10078-1',
            'E60002-1',
            'ER040934-01',
            'ER098776-01',
            'ER109183-01',
            'ER138272-01',
            'ER149179-01',
            'ER154221-01',
            'ER189826-01',
            'ER189826-02',
            'ER189826-03',
            'ER189826-04',
            'ER389442-01',
            'ER495319-02',
            'ER5011-01',
            'ER5014-01',
            'ER5037-01',
            'ER584334-01',
            'ER6005-01',
            'ER6022-01',
            'ER6042-01',
            'ER693427-01',
            'ER718847-01',
            'ER726284-01',
            'ER757244-01',
            'ER881299-01',
            'FA0100-01',
            'FA0176-01',
            'FA0176-02',
            'FA0176-03',
            'FA0178-01',
            'FA0178-02',
            'FA0178-03',
            'FA0225-01',
            'FA0249-01',
            'FA0321-01',
            'FA0321-02',
            'FA0407-01',
            'FA0407-02',
            'FA0431-01',
            'FA0431-02',
            'FA0431-03',
            'FA0434-02',
            'FA0453-01',
            'FA0457-01',
            'FA0457-02',
            'FA0457-03',
            'FA0457-05',
            'FA0457-07',
            'FA0481-01',
            'FA0602-01',
            'FA0602-02',
            'FA0602-03',
            'FA0629-05',
            'FA0654-02',
            'FA0726-01',
            'FA0726-02',
            'FA0726-03',
            'FA0742-06',
            'FA0754-01',
            'FA0761-01',
            'FA0761-02',
            'FA0761-03',
            'FA0768-01',
            'FA0831-01',
            'FA0831-02',
            'FA0835-01',
            'FA0841-01',
            'FA0852-01',
            'FA0892-01',
            'FA0892-02',
            'FA0924-04',
            'FM0088-02',
            'FM0088-03',
            'FM0088-04',
            'FM0125-02',
            'FM0125-03',
            'FM0161-01',
            'FM0395-01',
            'FM0428-02',
            'FM0428-03',
            'FP0044-01',
            'FP0044-05',
            'FP0044-06',
            'FP0044-07',
            'FP0044-10',
            'FP0044-12',
            'FP0044-13',
            'FP0049-01',
            'FP0099-01',
            'FP0099-02',
            'FP0101-01',
            'FP0124-04',
            'FP0150-01',
            'FP0174-01',
            'FP0180-02',
            'FP0200-01',
            'FP0207-01',
            'FP0266-01',
            'FP0266-02',
            'FP0266-03',
            'FP0292-01',
            'FP0327-02',
            'FP0330-01',
            'FP0330-02',
            'FP0330-03',
            'FP0330-04',
            'FP0334-01',
            'FP0373-03',
            'FP0424-01',
            'FP0424-02',
            'FP0424-03',
            'FP0427-01',
            'FP0432-01',
            'FP0434-01',
            'FP0472-01',
            'FP0511-01',
            'FP0511-03',
            'FP0511-04',
            'FP0662-01',
            'FP0662-02',
            'FP0662-05',
            'FP0662-06',
            'FP0662-07',
            'FP0662-08',
            'FP0662-09',
            'FP0662-10',
            'FP0665-02',
            'FP0668-03',
            'FP0668-09',
            'FP0669-01',
            'FP0669-02',
            'FP0669-04',
            'FP0669-05',
            'FP0692-02',
            'FP0877-01',
            'FP0885-01',
            'FP0885-02',
            'FP0886-02',
            'FP0886-04',
            'FT0017-01',
            'FT0139-01',
            'FT0642-01',
            'FT0667-01',
            'FX0052-01',
            'FX0160-01',
            'FX0170-01',
            'FX0170-02',
            'FX0206-02',
            'FX0206-03',
            'FX0206-04',
            'FX0206-05',
            'FX0206-06',
            'FX0231-01',
            'FX0239-01',
            'FX0324-01',
            'FX0353-01',
            'FX0382-02',
            'FX0419-01',
            'FX0536-01',
            'FX0552-02',
            'FX0743-02',
            'FX0752-01',
            'FX0757-03',
            'FX0757-06',
            'FX0757-07',
            'FX0757-08',
            'FX0772-01',
            'FX0772-02',
            'FX0772-03',
            'FX0819-01',
            'FX0819-02',
            'FX0819-03',
            'FX0823-01',
            'FX0823-02',
            'FX0880-02',
            'GA005071-01',
            'GA005071-03',
            'GA009073-02',
            'GA017734-01',
            'GA023816-01',
            'GA0335-02',
            'GA0337-01',
            'GA075836-01',
            'GA082118-02',
            'GA166956-01',
            'GA272838-01',
            'GA427263-01',
            'GA435020-01',
            'GA435020-02',
            'GA444815-01',
            'GA444815-02',
            'GA455778-01',
            'GA572358-01',
            'GA572358-03',
            'GA602689-01',
            'GA707167-01',
            'GA765393-01',
            'GA765393-02',
            'GA832826-01',
            'GA933076-01',
            'GA933076-02',
            'GA933076-03',
            'GA933076-04',
            'GER2002-01',
            'GER2003-01',
            'GER2005-01',
            'GER2013-01',
            'GER2014-02',
            'GER2018-01',
            'GER2021-01',
            'GlassesCloth-01',
            'GlassesPocket',
            'GM016699-01',
            'GM016699-02',
            'GM031232-01',
            'GM031715-03',
            'GM0340-01',
            'GM0340-02',
            'GM0356-01',
            'GM046240-01',
            'GM046240-02',
            'GM062410-01',
            'GM062410-02',
            'GM082451-01',
            'GM119026-01',
            'GM119026-02',
            'GM119026-03',
            'GM137973-02',
            'GM255319-01',
            'GM256830-01',
            'GM256830-02',
            'GM256830-03',
            'GM282046-01',
            'GM282046-03',
            'GM359523-01',
            'GM359523-02',
            'GM362645-01',
            'GM372191-04',
            'GM412096-01',
            'GM412096-02',
            'GM503870-01',
            'GM503870-02',
            'GM557950-01',
            'GM559668-01',
            'GM563824-01',
            'GM863264-01',
            'GM863264-02',
            'GM915738-01',
            'GM947526-02',
            'GM953645-01',
            'GM953645-02',
            'GNL2023-01',
            'GP0314-01',
            'GP0314-02',
            'GP0314-03',
            'GP0314-05',
            'GSM0001-02',
            'GSM0023-01',
            'GSM0041-01',
            'GST0032-01',
            'GSW0033-01',
            'GSX0012-01',
            'GSX0013-01',
            'GT649281-01',
            'GX089313-01',
            'GX089313-03',
            'GX089313-04',
            'GX322474-01',
            'GX322474-02',
            'GX682784-01',
            'HM0138-01',
            'HP0181-02',
            'HP0223-01',
            'HP0223-02',
            'HW6017-01',
            'JS051240-01',
            'Leatherbox001-01',
            'Leatherbox001-02',
            'Leatherbox001-03',
            'Mask-01',
            'NBY002-1',
            'Necklace-02',
            'NL081854-01',
            'NL764747-01',
            'NXP005-1',
            'OA01451-01',
            'OA01451-02',
            'OA01451-03',
            'OA01451-04',
            'OA01466-01',
            'OA01498-01',
            'OA01499-01',
            'OA01499-04',
            'OA01500-02',
            'OA01508-01',
            'OA01508-02',
            'OA01542-05',
            'OA01574-01',
            'OA01762-01',
            'OA01763-02',
            'OA01767-01',
            'OA01767-04',
            'OA01767-10',
            'OA01767-11',
            'OA01767-12',
            'OA01776-01',
            'OA01776-02',
            'OA01776-05',
            'OA01776-06',
            'OA01776-07',
            'OA01776-08',
            'OA01786-01',
            'OA01798-01',
            'OA01798-02',
            'OA01805-01',
            'OA01815-03',
            'OA01822-03',
            'OA01840-01',
            'OA01850-01',
            'OA01858-03',
            'OA01858-04',
            'OA01858-05',
            'OA01858-07',
            'OA01858-09',
            'OA01862-01',
            'OA01866-02',
            'OA01870-02',
            'OA01873-01',
            'OA01900-01',
            'OA01901-01',
            'OA01901-02',
            'OA01901-03',
            'OA01901-04',
            'OA01901-05',
            'OA01901-09',
            'OA01901-14',
            'OA01901-15',
            'OA01901-18',
            'OA01901-19',
            'OA01904-01',
            'OA01920-01',
            'OA01946-02',
            'OA01968-01',
            'OA01968-03',
            'OA01968-04',
            'OA01968-05',
            'OA02007-01',
            'OA02007-02',
            'OA02007-04',
            'OA02007-05',
            'OA02007-06',
            'OA02007-07',
            'OA02007-08',
            'OA02007-09',
            'OA02015-01',
            'OA02015-03',
            'OA02026-01',
            'OA02034-02',
            'OA02040-02',
            'OA02040-03',
            'OA02040-04',
            'OA02055-01',
            'OA02109-01',
            'OA02113-01',
            'OA02117-03',
            'OA02123-02',
            'OA02123-04',
            'OA02123-06',
            'OA02130-01',
            'OA02133-01',
            'OA02140-02',
            'OA02140-04',
            'OA032042-02',
            'OA047287-01',
            'OA047287-02',
            'OA082477-01',
            'OA183678-01',
            'OA199298-06',
            'OA245972-01',
            'OA391157-02',
            'OA391157-03',
            'OA391157-07',
            'OA511723-02',
            'OA511723-04',
            'OA511723-06',
            'OA766129-01',
            'OA766129-03',
            'OA853169-01',
            'OA853169-02',
            'OA877655-01',
            'OA919468-01',
            'OA968085-01',
            'OA968085-03',
            'OI003342-02',
            'OI287162-01',
            'OI611693-02',
            'OI611693-03',
            'OI694780-02',
            'OI731923-01',
            'OI815956-01',
            'OI946147-01',
            'OI986882-01',
            'OI986882-02',
            'OI986882-03',
            'OM01454-01',
            'OM01473-01',
            'OM01489-01',
            'OM01490-02',
            'OM02119-01',
            'OM072875-01',
            'OM075349-01',
            'OM075349-02',
            'OM075349-03',
            'OM076042-04',
            'OM087416-01',
            'OM087416-02',
            'OM087416-03',
            'OM094579-02',
            'OM111884-01',
            'OM111884-02',
            'OM119551-01',
            'OM138826-01',
            'OM138826-02',
            'OM184189-01',
            'OM184189-02',
            'OM184189-03',
            'OM184189-04',
            'OM184189-05',
            'OM199885-01',
            'OM202513-02',
            'OM223586-02',
            'OM223586-03',
            'OM223586-04',
            'OM226650-01',
            'OM226650-02',
            'OM268544-01',
            'OM268544-02',
            'OM268544-03',
            'OM336680-01',
            'OM352612-01',
            'OM352612-02',
            'OM376037-01',
            'OM386116-01',
            'OM386116-02',
            'OM414288-01',
            'OM414288-02',
            'OM414288-03',
            'OM414288-04',
            'OM433470-01',
            'OM433470-02',
            'OM433470-03',
            'OM433470-04',
            'OM465432-02',
            'OM495971-01',
            'OM501092-01',
            'OM501092-02',
            'OM506216-01',
            'OM506896-01',
            'OM506896-02',
            'OM538713-01',
            'OM763123-01',
            'OM763123-02',
            'OM813387-03',
            'OM832039-01',
            'OM837272-01',
            'OM837272-02',
            'OM875380-01',
            'OM875380-02',
            'OM875380-03',
            'OM944324-01',
            'OM975597-01',
            'OM975597-03',
            'OM975597-04',
            'OM977556-02',
            'ON035814-01',
            'OO159042-01',
            'OO322217-01',
            'OO836688-01',
            'OP002789-02',
            'OP003086-02',
            'OP006413-02',
            'OP006896-03',
            'OP006896-04',
            'OP008546-01',
            'OP008768-03',
            'OP010193-01',
            'OP010193-06',
            'OP013749-01',
            'OP013749-04',
            'OP014210-01',
            'OP01860-02',
            'OP01860-03',
            'OP01860-05',
            'OP01860-06',
            'OP01860-07',
            'OP01860-08',
            'OP01860-09',
            'OP01863-03',
            'OP01863-04',
            'OP01863-05',
            'OP01884-02',
            'OP01884-06',
            'OP01887-06',
            'OP01887-07',
            'OP01887-08',
            'OP01890-03',
            'OP01892-01',
            'OP01892-03',
            'OP01892-04',
            'OP01892-05',
            'OP01892-07',
            'OP01892-09',
            'OP01892-10',
            'OP01892-11',
            'OP01892-12',
            'OP01899-03',
            'OP01912-02',
            'OP01912-03',
            'OP01912-04',
            'OP01934-03',
            'OP01934-04',
            'OP01934-06',
            'OP01956-01',
            'OP01956-02',
            'OP01956-03',
            'OP01956-04',
            'OP01957-02',
            'OP01957-04',
            'OP01977-01',
            'OP01977-02',
            'OP01983-01',
            'OP01983-02',
            'OP01983-04',
            'OP02048-05',
            'OP02052-01',
            'OP02073-01',
            'OP02098-03',
            'OP02098-04',
            'OP02120-02',
            'OP02126-02',
            'OP02126-03',
            'OP02126-05',
            'OP02126-06',
            'OP02126-08',
            'OP02126-10',
            'OP02129-02',
            'OP02129-03',
            'OP02131-02',
            'OP025451-01',
            'OP025962-01',
            'OP037821-01',
            'OP037821-03',
            'OP037821-05',
            'OP037821-06',
            'OP037821-07',
            'OP037822-01',
            'OP037822-02',
            'OP038454-02',
            'OP048729-01',
            'OP049594-02',
            'OP054962-01',
            'OP054962-02',
            'OP054962-05',
            'OP055696-02',
            'OP057035-04',
            'OP061699-01',
            'OP061699-02',
            'OP066822-03',
            'OP066822-05',
            'OP068304-02',
            'OP068304-05',
            'OP068304-06',
            'OP071873-01',
            'OP071873-02',
            'OP073046-01',
            'OP073046-02',
            'OP073046-03',
            'OP075744-01',
            'OP075866-01',
            'OP075866-02',
            'OP075866-03',
            'OP075866-04',
            'OP075937-01',
            'OP075937-02',
            'OP079162-01',
            'OP080978-01',
            'OP080978-02',
            'OP084425-01',
            'OP087810-07',
            'OP089533-01',
            'OP099710-04',
            'OP107346-01',
            'OP107346-02',
            'OP107346-03',
            'OP107346-05',
            'OP136461-01',
            'OP153479-02',
            'OP153479-03',
            'OP153479-04',
            'OP153479-06',
            'OP162490-03',
            'OP162490-04',
            'OP162712-01',
            'OP166621-04',
            'OP166621-06',
            'OP168655-03',
            'OP169384-01',
            'OP207933-01',
            'OP226540-02',
            'OP235358-01',
            'OP235563-01',
            'OP235563-03',
            'OP239668-03',
            'OP239668-04',
            'OP239668-06',
            'OP241582-02',
            'OP241582-03',
            'OP269513-01',
            'OP269513-02',
            'OP301581-02',
            'OP313158-02',
            'OP336618-02',
            'OP365687-01',
            'OP365687-02',
            'OP365687-03',
            'OP373340-01',
            'OP394420-02',
            'OP429312-02',
            'OP429312-03',
            'OP449452-01',
            'OP449452-02',
            'OP449452-03',
            'OP456725-01',
            'OP456725-02',
            'OP462346-02',
            'OP481540-05',
            'OP492911-01',
            'OP499012-01',
            'OP525244-01',
            'OP525244-03',
            'OP525244-04',
            'OP575651-05',
            'OP579084-01',
            'OP579084-02',
            'OP592886-01',
            'OP592886-02',
            'OP592886-03',
            'OP592886-06',
            'OP592886-07',
            'OP606881-01',
            'OP606881-02',
            'OP653374-01',
            'OP679529-01',
            'OP679529-02',
            'OP704153-03',
            'OP707465-01',
            'OP707465-02',
            'OP724373-02',
            'OP725733-01',
            'OP725733-02',
            'OP725733-03',
            'OP736125-01',
            'OP736125-02',
            'OP736567-01',
            'OP791268-01',
            'OP791268-03',
            'OP797619-01',
            'OP797619-02',
            'OP797619-03',
            'OP797619-04',
            'OP797619-05',
            'OP797619-06',
            'OP797619-07',
            'OP821621-01',
            'OP873370-01',
            'OP873370-02',
            'OP883179-01',
            'OP889378-01',
            'OP895079-01',
            'OP903993-02',
            'OP903993-03',
            'OP903993-06',
            'OP911170-02',
            'OP911170-04',
            'OP919529-02',
            'OP921982-01',
            'OP928638-01',
            'OP928638-02',
            'OP928770-01',
            'OP928770-02',
            'OP944539-01',
            'OP954173-01',
            'OP954173-04',
            'OP954173-05',
            'OP954173-06',
            'OP954173-07',
            'OP971516-05',
            'OP971516-06',
            'OT006813-01',
            'OT006813-02',
            'OT006813-04',
            'OT006813-05',
            'OT006813-06',
            'OT010292-01',
            'OT011656-02',
            'OT011656-03',
            'OT01476-02',
            'OT01910-01',
            'OT01978-01',
            'OT01978-03',
            'OT02018-02',
            'OT02019-01',
            'OT02019-02',
            'OT02019-04',
            'OT020785-01',
            'OT020861-03',
            'OT02087-01',
            'OT02087-02',
            'OT02087-03',
            'OT02087-05',
            'OT02144-02',
            'OT02144-03',
            'OT02145-01',
            'OT023325-01',
            'OT023325-02',
            'OT023325-03',
            'OT023325-04',
            'OT026952-01',
            'OT026952-02',
            'OT026952-03',
            'OT030261-02',
            'OT030261-03',
            'OT030261-04',
            'OT030261-05',
            'OT038647-01',
            'OT038647-04',
            'OT039573-01',
            'OT039573-02',
            'OT068084-01',
            'OT068084-02',
            'OT092341-01',
            'OT092341-03',
            'OT092341-06',
            'OT092477-01',
            'OT092477-02',
            'OT092477-03',
            'OT092477-06',
            'OT093437-01',
            'OT095297-03',
            'OT099571-01',
            'OT108597-01',
            'OT108597-02',
            'OT108597-05',
            'OT115181-01',
            'OT115181-02',
            'OT115181-04',
            'OT117097-01',
            'OT117097-02',
            'OT117097-04',
            'OT146796-01',
            'OT148838-01',
            'OT157359-02',
            'OT157359-03',
            'OT157359-04',
            'OT162313-01',
            'OT162313-02',
            'OT162313-03',
            'OT162313-04',
            'OT165581-01',
            'OT176792-01',
            'OT186511-01',
            'OT186511-02',
            'OT186511-03',
            'OT207217-01',
            'OT207217-02',
            'OT207876-01',
            'OT207876-03',
            'OT222092-02',
            'OT235163-02',
            'OT235163-06',
            'OT253030-02',
            'OT253030-03',
            'OT253030-05',
            'OT265678-01',
            'OT311788-01',
            'OT311788-02',
            'OT311788-03',
            'OT311788-04',
            'OT311788-05',
            'OT311788-06',
            'OT343418-01',
            'OT343418-02',
            'OT343418-03',
            'OT343418-04',
            'OT343418-05',
            'OT352772-01',
            'OT352772-02',
            'OT369697-01',
            'OT389022-04',
            'OT413672-10',
            'OT414973-02',
            'OT414973-03',
            'OT414973-04',
            'OT414973-05',
            'OT445481-01',
            'OT465170-01',
            'OT465170-02',
            'OT465170-03',
            'OT485292-02',
            'OT496881-04',
            'OT518836-01',
            'OT518836-02',
            'OT518836-04',
            'OT518836-05',
            'OT518836-06',
            'OT524812-01',
            'OT566619-02',
            'OT569852-01',
            'OT569852-02',
            'OT569852-03',
            'OT576184-01',
            'OT615924-01',
            'OT615924-04',
            'OT615924-06',
            'OT615924-08',
            'OT615924-09',
            'OT629735-01',
            'OT632399-01',
            'OT632399-02',
            'OT632399-03',
            'OT643751-01',
            'OT643751-02',
            'OT652438-04',
            'OT652438-05',
            'OT663524-01',
            'OT665155-01',
            'OT665155-06',
            'OT688777-01',
            'OT688777-02',
            'OT703228-01',
            'OT703228-02',
            'OT712769-02',
            'OT714213-02',
            'OT714213-03',
            'OT714213-04',
            'OT714213-05',
            'OT724498-01',
            'OT766472-01',
            'OT766472-02',
            'OT776862-01',
            'OT776862-02',
            'OT776862-03',
            'OT789653-05',
            'OT799337-01',
            'OT802692-01',
            'OT802692-02',
            'OT802692-03',
            'OT854223-01',
            'OT854223-02',
            'OT854223-03',
            'OT854223-04',
            'OT854223-05',
            'OT865063-01',
            'OT894558-01',
            'OT917236-02',
            'OT921139-01',
            'OT921139-03',
            'OT964573-01',
            'OT964573-04',
            'OU655925-01',
            'OU655925-02',
            'OX003749-01',
            'OX006465-01',
            'OX006465-03',
            'OX006465-04',
            'OX006465-05',
            'OX009644-01',
            'OX009644-02',
            'OX011570-01',
            'OX011570-02',
            'OX011570-03',
            'OX011570-04',
            'OX011792-01',
            'OX01452-01',
            'OX01583-01',
            'OX017439-01',
            'OX017439-02',
            'OX01766-01',
            'OX017894-02',
            'OX017894-04',
            'OX01841-01',
            'OX02009-01',
            'OX02022-02',
            'OX02093-01',
            'OX02101-01',
            'OX02101-02',
            'OX035445-01',
            'OX037155-01',
            'OX037155-02',
            'OX037155-03',
            'OX039828-01',
            'OX043050-02',
            'OX043050-03',
            'OX049063-01',
            'OX063349-03',
            'OX063349-04',
            'OX063349-05',
            'OX065861-01',
            'OX065861-02',
            'OX065861-03',
            'OX068778-01',
            'OX084225-03',
            'OX084225-04',
            'OX123188-02',
            'OX123188-03',
            'OX126392-03',
            'OX128032-01',
            'OX128032-02',
            'OX154394-01',
            'OX154394-04',
            'OX163642-03',
            'OX232157-01',
            'OX232157-03',
            'OX245026-01',
            'OX245026-02',
            'OX258038-01',
            'OX258038-02',
            'OX264142-01',
            'OX264142-04',
            'OX272286-01',
            'OX298968-01',
            'OX299229-01',
            'OX299229-02',
            'OX331639-01',
            'OX331639-03',
            'OX331639-04',
            'OX345581-01',
            'OX395215-01',
            'OX403520-01',
            'OX403520-02',
            'OX433219-04',
            'OX443267-01',
            'OX443267-02',
            'OX452097-01',
            'OX452097-02',
            'OX452097-03',
            'OX452097-04',
            'OX452097-05',
            'OX458420-01',
            'OX458420-02',
            'OX458420-03',
            'OX459485-03',
            'OX462594-02',
            'OX481643-01',
            'OX481643-02',
            'OX481643-03',
            'OX487465-01',
            'OX519935-01',
            'OX521044-01',
            'OX521044-02',
            'OX521044-03',
            'OX521044-05',
            'OX533685-01',
            'OX533685-02',
            'OX616570-02',
            'OX616570-04',
            'OX627120-01',
            'OX627120-02',
            'OX671622-02',
            'OX671622-03',
            'OX671622-06',
            'OX684861-01',
            'OX687642-01',
            'OX687642-02',
            'OX687642-03',
            'OX687642-04',
            'OX687642-05',
            'OX716664-01',
            'OX716664-02',
            'OX716664-04',
            'OX716664-05',
            'OX723043-01',
            'OX723043-03',
            'OX727389-01',
            'OX727451-03',
            'OX727451-04',
            'OX727451-05',
            'OX728260-01',
            'OX728260-02',
            'OX728260-03',
            'OX737634-01',
            'OX737634-02',
            'OX739865-07',
            'OX742171-01',
            'OX783964-01',
            'OX802941-01',
            'OX802941-02',
            'OX812471-01',
            'OX818992-01',
            'OX823541-01',
            'OX823541-02',
            'OX845435-02',
            'OX845435-03',
            'OX872988-01',
            'OX881089-01',
            'OX906363-01',
            'OX915680-01',
            'OX921163-02',
            'OX937863-01',
            'OX963140-01',
            'OX984868-01',
            'OX992564-02',
            'RM0545-01',
            'SA010588-02',
            'SA010588-03',
            'SA01261-02',
            'SA01301-01',
            'SA137325-01',
            'SA137325-02',
            'SA137325-03',
            'SA145262-01',
            'SA145262-03',
            'SA145262-04',
            'SA198221-02',
            'SA223928-02',
            'SA268647-01',
            'SA268647-02',
            'SA268647-03',
            'SA323438-01',
            'SA323438-02',
            'SA323438-03',
            'SA323438-04',
            'SA647319-01',
            'SA647319-02',
            'SA647319-04',
            'SA941431-04',
            'SM0042-02',
            'SM01266-01',
            'SM01319-01',
            'SM01325-01',
            'SM016807-01',
            'SM016807-02',
            'SM016807-03',
            'SM016807-04',
            'SM024279-01',
            'SM024279-02',
            'SM024279-03',
            'SM052031-01',
            'SM103749-01',
            'SM103749-02',
            'SM189184-01',
            'SM241073-01',
            'SM241073-02',
            'SM241073-03',
            'SM241073-04',
            'SM243656-01',
            'SM534670-03',
            'SM901394-01',
            'SM901394-02',
            'SM989868-01',
            'SN01328-03',
            'SP0018-01',
            'SP026207-05',
            'SP973333-05',
            'SW0009-01',
            'SW0033-02',
            'SX212956-01',
            'SX212956-02',
            'SX212956-03',
            'TA065461-01',
            'TA065461-02',
            'TA065461-03',
            'TA065461-04',
            'TA206493-01',
            'TA762114-01',
            'TA762114-02',
            'TA762114-03',
            'TI0286-02',
            'TI0533-02',
            'TM001463-01',
            'TM003213-01',
            'TM017879-01',
            'TM017879-02',
            'TM042458-01',
            'TM042458-02',
            'TM042458-03',
            'TM042526-01',
            'TM071674-01',
            'TM071674-02',
            'TM073073-01',
            'TM073073-02',
            'TM080384-01',
            'TM080384-02',
            'TM086127-01',
            'TM086127-02',
            'TM089707-01',
            'TM094473-01',
            'TM094473-02',
            'TM094473-04',
            'TM105046-01',
            'TM105046-02',
            'TM105046-03',
            'TM256438-01',
            'TM256438-02',
            'TM256438-03',
            'TM256438-04',
            'TM271694-01',
            'TM271694-02',
            'TM271694-03',
            'TM271694-04',
            'TM329140-01',
            'TM329140-02',
            'TM329140-03',
            'TM428727-01',
            'TM428727-02',
            'TM428727-04',
            'TM428727-05',
            'TM428727-06',
            'TM432413-01',
            'TM432413-02',
            'TM432413-03',
            'TM432413-04',
            'TM441128-01',
            'TM441128-02',
            'TM481377-01',
            'TM582947-01',
            'TM582947-02',
            'TM617965-01',
            'TM625894-01',
            'TM625894-03',
            'TM631988-02',
            'TM631988-03',
            'TM712374-01',
            'TM772518-01',
            'TM772518-02',
            'TM794239-01',
            'TM794239-02',
            'TM794239-03',
            'TM819768-01',
            'TM819768-02',
            'TM823763-01',
            'TM827054-01',
            'TM841978-01',
            'TM858823-01',
            'TM863291-02',
            'TM863291-03',
            'TM865428-01',
            'TM865428-02',
            'TM994396-01',
            'TM994396-02',
            'TM994396-03',
            'TM994396-04',
            'TM994396-05',
            'TO555713-01',
            'TT013417-01',
            'TT081550-01',
            'TT081550-02',
            'TT089380-01',
            'TT091915-01',
            'TT123484-01',
            'TT123484-03',
            'TT162834-01',
            'TT162834-02',
            'TT162834-03',
            'TT178945-01',
            'TT217878-01',
            'TT217878-04',
            'TT217878-05',
            'TT256753-01',
            'TT256753-02',
            'TT265225-03',
            'TT265225-04',
            'TT347546-02',
            'TT347546-03',
            'TT409720-01',
            'TT409720-02',
            'TT457469-01',
            'TT457469-02',
            'TT457469-03',
            'TT475156-02',
            'TT475156-04',
            'TT579425-02',
            'TT579425-03',
            'TT587129-02',
            'TT587129-03',
            'TT598617-01',
            'TT598617-02',
            'TT598617-03',
            'TT598617-04',
            'TT598617-05',
            'TT598617-07',
            'TT647747-01',
            'TT751899-01',
            'TT751899-02',
            'TT787768-01',
            'TT787768-02',
            'TT787768-03',
            'TT802724-01',
            'TT802724-02',
            'TT848737-01',
            'TT848737-02',
            'TT852163-01',
            'TT926146-01',
            'TT926146-02',
            'TT993528-05',
            'TX004858-01',
            'TX004858-02',
            'TX004858-04',
            'TX004858-05',
            'TX016856-01',
            'TX023439-01',
            'TX055276-02',
            'TX055276-05',
            'TX078033-01',
            'TX078033-02',
            'TX078033-03',
            'TX083654-01',
            'TX083654-04',
            'TX117679-01',
            'TX117679-02',
            'TX122482-01',
            'TX122482-02',
            'TX122482-03',
            'TX225717-01',
            'TX225717-03',
            'TX281731-01',
            'TX281731-02',
            'TX281731-03',
            'TX314798-01',
            'TX314798-03',
            'TX314798-04',
            'TX314798-05',
            'TX314798-06',
            'TX357178-01',
            'TX373536-01',
            'TX373536-02',
            'TX373536-03',
            'TX452142-01',
            'TX452142-02',
            'TX452142-03',
            'TX456916-01',
            'TX456916-02',
            'TX456916-03',
            'TX479567-01',
            'TX479567-02',
            'TX491611-01',
            'TX493172-01',
            'TX493172-02',
            'TX493172-03',
            'TX512293-01',
            'TX512713-03',
            'TX531583-02',
            'TX531583-04',
            'TX536598-01',
            'TX536598-02',
            'TX536598-03',
            'TX548130-01',
            'TX548130-02',
            'TX548130-03',
            'TX548130-04',
            'TX548130-05',
            'TX578858-01',
            'TX579630-01',
            'TX579630-02',
            'TX579630-04',
            'TX579630-05',
            'TX599374-01',
            'TX599374-03',
            'TX637121-02',
            'TX637121-03',
            'TX637121-04',
            'TX687442-01',
            'TX687442-02',
            'TX723249-01',
            'TX742894-02',
            'TX784042-01',
            'TX784042-02',
            'TX784042-04',
            'TX784196-02',
            'TX784196-03',
            'TX784196-04',
            'TX784196-05',
            'TX804797-01',
            'TX816080-01',
            'TX816080-04',
            'TX828043-01',
            'TX828043-02',
            'TX828043-03',
            'TX828043-04',
            'TX834837-01',
            'TX834837-02',
            'TX834837-03',
            'TX834837-04',
            'TX867628-01',
            'TX867628-02',
            'TX867628-03',
            'TX867628-04',
            'TX867628-05',
            'TX893639-01',
            'TX893639-02',
            'TX893639-05',
            'TX898397-01',
            'TX898397-02',
            'TX898397-04',
            'TX898397-05',
            'VFA0072-03',
            'VFA0072-04',
            'VFA0072-05',
            'VFM0015-01',
            'VFM0015-03',
            'VFM0048-01',
            'VFM0048-02',
            'VFM0176-01',
            'VFM0176-02',
            'VFM0176-03',
            'VFM0176-04',
            'VFM0176-05',
            'VFM0176-06',
            'VFM0176-07',
            'VFM0176-08',
            'VFM0176-09',
            'VFP0032-01',
            'VFP0032-03',
            'VFP0158-01',
            'VFP0158-02',
            'VFP0158-03',
            'VFP0163-02',
            'VFP0163-03',
            'VFP0164-01',
            'VFP0164-03',
            'VFP0165-02',
            'VFP0166-02',
            'VFP0168-02',
            'VFP0169-01',
            'VFP0169-02',
            'VFP0169-05',
            'VFP0171-03',
            'VFP0177-01',
            'VFP0177-02',
            'VFP0179-01',
            'VFP0179-04',
            'VFP0183-01',
            'VFP0183-02',
            'VFP0227-01',
            'VFP0236-02',
            'VFP0236-04',
            'VFP0255-04',
            'VFP0256-01',
            'VFP0256-02',
            'VFP0256-05',
            'VFP0261-02',
            'VFP0270-03',
            'VFP0270-05',
            'VFP0270-06',
            'VFP0270-07',
            'VFP0273-01',
            'VFP0274-04',
            'VFP0274-07',
            'VFP0288-01',
            'VFP0290-01',
            'VFP0290-03',
            'VFP0290-04',
            'VFP0290-05',
            'VFP0290-08',
            'VFP0298-01',
            'VFP0299-02',
            'VFP0306-04',
            'VFP0306-07',
            'VFP0306-08',
            'VFP0306-09',
            'VFP0306-11',
            'VFP0306-12',
            'VFP0306-13',
            'VFP0317-01',
            'VFP0317-02',
            'VFT0269-01',
            'VFT0271-05',
            'VFX0060-01',
            'VFX0060-02',
            'VFX0062-03',
            'VFX0062-04',
            'VFX0150-01',
            'VFX0152-02',
            'VFX0152-03',
            'VFX0191-01',
            'VHP0189-03',
            'VHP0189-08',
            'VHP0189-11',
            'VHP0189-12',
            'WA000487-02',
            'WA000487-04',
            'WA000487-05',
            'WA006389-01',
            'WA011292-01',
            'WA011292-02',
            'WA011292-03',
            'WA011292-04',
            'WA012308-01',
            'WA012308-02',
            'WA012308-03',
            'WA012308-04',
            'WA012457-01',
            'WA012457-02',
            'WA01600-01',
            'WA01601-02',
            'WA01604-02',
            'WA01607-01',
            'WA01626-04',
            'WA01635-01',
            'WA01645-01',
            'WA01647-02',
            'WA01653-01',
            'WA01653-02',
            'WA01687-01',
            'WA01702-02',
            'WA01705-01',
            'WA01705-02',
            'WA01720-02',
            'WA01753-01',
            'WA01753-02',
            'WA01753-03',
            'WA01753-06',
            'WA01753-07',
            'WA018352-01',
            'WA018352-02',
            'WA018352-03',
            'WA018352-04',
            'WA031277-01',
            'WA031277-03',
            'WA034265-01',
            'WA034265-02',
            'WA034265-03',
            'WA034265-04',
            'WA034265-05',
            'WA034649-01',
            'WA035665-01',
            'WA035804-01',
            'WA035804-02',
            'WA035804-03',
            'WA035804-04',
            'WA035804-05',
            'WA036297-01',
            'WA042436-01',
            'WA043668-01',
            'WA043668-02',
            'WA043668-03',
            'WA043790-02',
            'WA054898-03',
            'WA054898-05',
            'WA062247-04',
            'WA062247-05',
            'WA062782-02',
            'WA062782-04',
            'WA063596-01',
            'WA065451-01',
            'WA065451-02',
            'WA069535-02',
            'WA069535-04',
            'WA069535-06',
            'WA069535-07',
            'WA071469-01',
            'WA071469-02',
            'WA071469-03',
            'WA072828-01',
            'WA072828-02',
            'WA072828-03',
            'WA072828-04',
            'WA077166-03',
            'WA079045-01',
            'WA079045-02',
            'WA079045-03',
            'WA080698-01',
            'WA081494-01',
            'WA086176-02',
            'WA096252-02',
            'WA096252-03',
            'WA096252-04',
            'WA096252-05',
            'WA101862-01',
            'WA104084-03',
            'WA104084-04',
            'WA104084-05',
            'WA104195-01',
            'WA105764-01',
            'WA105764-02',
            'WA105764-03',
            'WA105764-04',
            'WA105764-05',
            'WA108054-02',
            'WA135389-02',
            'WA144030-06',
            'WA158859-01',
            'WA158859-02',
            'WA158859-05',
            'WA172999-01',
            'WA174020-01',
            'WA192071-02',
            'WA192071-04',
            'WA233265-01',
            'WA233265-02',
            'WA233265-03',
            'WA233265-04',
            'WA233265-05',
            'WA233799-01',
            'WA233799-03',
            'WA233799-04',
            'WA233799-05',
            'WA233799-06',
            'WA245023-01',
            'WA245023-04',
            'WA245023-05',
            'WA253742-02',
            'WA258752-01',
            'WA258752-03',
            'WA258752-04',
            'WA259684-01',
            'WA259684-02',
            'WA263231-03',
            'WA304168-01',
            'WA304168-02',
            'WA311167-02',
            'WA311167-04',
            'WA311167-05',
            'WA311167-06',
            'WA351257-01',
            'WA351969-01',
            'WA351969-03',
            'WA351969-04',
            'WA351969-06',
            'WA363255-03',
            'WA376026-01',
            'WA376026-02',
            'WA383349-02',
            'WA395229-01',
            'WA397898-01',
            'WA397898-02',
            'WA397898-03',
            'WA416860-01',
            'WA422086-01',
            'WA422086-02',
            'WA438665-03',
            'WA438665-05',
            'WA438665-08',
            'WA438876-01',
            'WA438876-02',
            'WA438876-04',
            'WA441732-01',
            'WA454518-01',
            'WA454518-03',
            'WA454518-04',
            'WA454518-05',
            'WA456693-01',
            'WA456693-02',
            'WA477415-02',
            'WA482221-02',
            'WA482221-04',
            'WA498248-01',
            'WA498248-02',
            'WA498248-03',
            'WA498248-05',
            'WA498248-06',
            'WA498248-07',
            'WA514578-01',
            'WA514578-03',
            'WA514578-04',
            'WA515812-01',
            'WA515812-02',
            'WA515812-03',
            'WA528512-01',
            'WA528512-02',
            'WA528512-03',
            'WA528512-04',
            'WA528512-06',
            'WA554367-01',
            'WA561992-02',
            'WA581464-06',
            'WA609979-01',
            'WA609979-02',
            'WA609979-03',
            'WA624495-02',
            'WA631945-01',
            'WA631945-02',
            'WA631945-03',
            'WA631945-04',
            'WA631945-05',
            'WA631945-06',
            'WA635697-01',
            'WA649172-02',
            'WA671325-01',
            'WA681769-01',
            'WA681769-02',
            'WA685033-01',
            'WA703642-02',
            'WA703642-03',
            'WA716339-01',
            'WA716339-02',
            'WA716339-03',
            'WA716339-04',
            'WA716339-05',
            'WA723599-01',
            'WA723599-02',
            'WA723599-03',
            'WA729070-01',
            'WA734062-01',
            'WA737113-01',
            'WA737113-02',
            'WA757842-05',
            'WA768816-01',
            'WA768816-04',
            'WA768816-06',
            'WA772111-01',
            'WA772111-02',
            'WA777329-04',
            'WA777329-08',
            'WA801627-01',
            'WA801627-02',
            'WA801627-03',
            'WA801627-04',
            'WA822781-03',
            'WA822781-04',
            'WA829049-06',
            'WA837517-01',
            'WA837517-02',
            'WA854631-01',
            'WA864442-01',
            'WA864442-02',
            'WA885863-02',
            'WA891389-01',
            'WA891389-02',
            'WA891389-04',
            'WA891389-05',
            'WA905785-03',
            'WA906730-01',
            'WA927534-01',
            'WA953018-01',
            'WA953018-02',
            'WA953018-03',
            'WA953018-04',
            'WA953018-05',
            'WA958512-01',
            'WA974038-01',
            'WA981434-02',
            'WI004840-01',
            'WI004840-02',
            'WM004930-01',
            'WM004930-02',
            'WM007849-01',
            'WM012934-01',
            'WM012934-02',
            'WM01678-01',
            'WM01682-03',
            'WM048545-01',
            'WM048545-02',
            'WM056330-01',
            'WM065166-01',
            'WM162166-01',
            'WM242542-02',
            'WM358398-01',
            'WM366128-01',
            'WM366128-02',
            'WM453611-01',
            'WM453611-02',
            'WM457246-01',
            'WM543770-03',
            'WM589667-01',
            'WM692931-01',
            'WM692931-02',
            'WM706044-01',
            'WM706044-02',
            'WM719954-01',
            'WM789391-01',
            'WM789391-02',
            'WM829722-01',
            'WM829722-02',
            'WM884467-01',
            'WM884467-02',
            'WM928151-01',
            'WM982680-01',
            'WO626691-05',
            'WP675087-02',
            'WT007860-01',
            'WT007860-02',
            'WT01663-01',
            'WT01695-01',
            'WT040279-01',
            'WT061812-01',
            'WT074325-01',
            'WT633347-01',
            'WT755965-03',
            'WX01639-01',
            'WX016813-01',
            'WX025861-01',
            'WX025861-02',
            'WX025861-04',
            'WX025861-05',
            'WX035111-02',
            'WX035111-03',
            'WX244787-01',
            'WX244787-02',
            'WX244787-03',
            'WX285328-01',
            'WX545741-01',
            'WX553661-01',
            'WX553661-02',
            'WX553661-03',
            'WX553661-04',
            'WX608616-01',
            'WX608616-02',
            'WX608616-03',
            'WX701721-01',
            'WX701721-04',
            'WX701721-05',
            'WX709297-02',
            'WX894082-01',
            'WX977822-01',
            'WX977822-02',
            'WX984973-01',
            'WX997265-01',
            'WX997265-02',
            'XT134925-01',
            'XT134925-02',
            'XT134925-03',
            'XT417734-07',
            'ZA0984-02',
            'ZI0995-02',
            'ZM0957-04',
            'ZM0978-02',
            'ZM0979-03',
            'ZM0981-01',
            'ZM0981-02',
            'ZM0981-03',
            'ZP0937-03',
            'ZX0923-03',
            'ZX0923-04',
            'ZX0925-02'];
        foreach ($arr as $k => $v) {
            $list[$k]['sku'] = $v;
            $list[$k]['stock'] = $productbarcodeitem
                ->where(['library_status' => 1, 'item_order_number' => '', 'sku' => $v])
                ->where('location_code_id','>',0)
                ->count();
        }
        Db::name('zz_temp2')->insertAll($list);

    }
    /************************跑库存数据用START*****勿删*****************************/
    //导入实时库存 第一步
    public function set_product_relstock()
    {
        $this->item = new \app\admin\model\itemmanage\Item;
        $list = Db::table('fa_zz_temp2')->select();
        foreach ($list as $k => $v) {
            $p_map['sku'] = $v['sku'];
            $data['real_time_qty'] = $v['stock'];
            $res = $this->item->where($p_map)->update($data);
            echo $v['sku'] . "\n";
        }
        echo 'ok';
        die;
    }

    /**
     * 统计配货占用 第二步
     *
     * @Description
     * @author wpl
     * @since 2020/04/11 15:54:25
     * @return void
     */
    public function set_product_process()
    {
        $this->orderitemprocess = new \app\admin\model\order\order\NewOrderItemProcess();
        $this->itemplatformsku = new \app\admin\model\itemmanage\ItemPlatformSku;
        $this->item = new \app\admin\model\itemmanage\Item;
        // $skus = $this->item->where(['is_open' => 1, 'is_del' => 1, 'category_id' => ['<>', 43]])->column('sku');

        $skus = Db::table('fa_zz_temp2')->column('sku');

        foreach ($skus as $k => $v) {
            $map = [];
            $zeelool_sku = $this->itemplatformsku->getWebSku($v, 1);
            $voogueme_sku = $this->itemplatformsku->getWebSku($v, 2);
            $nihao_sku = $this->itemplatformsku->getWebSku($v, 3);
            $wesee_sku = $this->itemplatformsku->getWebSku($v, 5);
            $meeloog_sku = $this->itemplatformsku->getWebSku($v, 4);
            $zeelool_es_sku = $this->itemplatformsku->getWebSku($v, 9);
            $zeelool_de_sku = $this->itemplatformsku->getWebSku($v, 10);
            $zeelool_jp_sku = $this->itemplatformsku->getWebSku($v, 11);
            $voogueme_acc_sku = $this->itemplatformsku->getWebSku($v, 12);
            $skus = [];
            $skus = [
                $zeelool_sku,
                $voogueme_sku,
                $nihao_sku,
                $wesee_sku,
                $meeloog_sku,
                $zeelool_es_sku,
                $zeelool_de_sku,
                $zeelool_jp_sku,
                $voogueme_acc_sku,
            ];

            $map['a.sku'] = ['in', array_filter($skus)];
            $map['b.status'] = ['in', ['processing', 'paypal_reversed', 'paypal_canceled_reversal']];
            $map['a.distribution_status'] = ['>', 2]; //大于待配货
            $map['c.check_status'] = 0; //未审单计算订单占用
            $map['b.created_at'] = ['between', [strtotime('2020-01-01 00:00:00'), time()]]; //时间节点
            $distribution_occupy_stock = $this->orderitemprocess->alias('a')->where($map)
                ->join(['fa_order' => 'b'], 'a.order_id = b.id')
                ->join(['fa_order_process' => 'c'], 'a.order_id = c.order_id')
                ->count(1);

            $p_map['sku'] = $v;
            $data['distribution_occupy_stock'] = $distribution_occupy_stock;
            $this->item->where($p_map)->update($data);
            echo $v . "\n";
            usleep(20000);
        }
        echo 'ok';
        die;
    }

    /**
     * 订单占用 第三步
     *
     * @Description
     * @author wpl
     * @since 2020/04/11 15:54:25
     * @return void
     */
    public function set_product_process_order()
    {
        $this->orderitemprocess = new \app\admin\model\order\order\NewOrderItemProcess();
        $this->itemplatformsku = new \app\admin\model\itemmanage\ItemPlatformSku;
        $this->item = new \app\admin\model\itemmanage\Item;
        // $skus = $this->item->where(['is_open' => 1, 'is_del' => 1, 'category_id' => ['<>', 43]])->column('sku');

        $skus = Db::table('fa_zz_temp2')->column('sku');
        foreach ($skus as $k => $v) {
            $map = [];
            $zeelool_sku = $this->itemplatformsku->getWebSku($v, 1);
            $voogueme_sku = $this->itemplatformsku->getWebSku($v, 2);
            $nihao_sku = $this->itemplatformsku->getWebSku($v, 3);
            $wesee_sku = $this->itemplatformsku->getWebSku($v, 5);
            $meeloog_sku = $this->itemplatformsku->getWebSku($v, 4);
            $zeelool_es_sku = $this->itemplatformsku->getWebSku($v, 9);
            $zeelool_de_sku = $this->itemplatformsku->getWebSku($v, 10);
            $zeelool_jp_sku = $this->itemplatformsku->getWebSku($v, 11);
            $voogueme_acc_sku = $this->itemplatformsku->getWebSku($v, 12);
            $skus = [];
            $skus = [
                $zeelool_sku,
                $voogueme_sku,
                $nihao_sku,
                $wesee_sku,
                $meeloog_sku,
                $zeelool_es_sku,
                $zeelool_de_sku,
                $zeelool_jp_sku,
                $voogueme_acc_sku,
            ];

            $map['a.sku'] = ['in', array_filter($skus)];
            $map['b.status'] = ['in', ['processing', 'paypal_reversed', 'paypal_canceled_reversal']];
            $map['a.distribution_status'] = ['<>', 0]; //排除取消状态
            $map['c.check_status'] = 0; //未审单计算订单占用
            $map['b.created_at'] = ['between', [strtotime('2020-01-01 00:00:00'), time()]]; //时间节点
            $occupy_stock = $this->orderitemprocess->alias('a')->where($map)
                ->join(['fa_order' => 'b'], 'a.order_id = b.id')
                ->join(['fa_order_process' => 'c'], 'a.order_id = c.order_id')
                ->count(1);

            $p_map['sku'] = $v;
            $data['occupy_stock'] = $occupy_stock;
            $this->item->where($p_map)->update($data);
            echo $v . "\n";
            usleep(20000);
        }
        echo 'ok';
        die;
    }

    /**
     * 可用库存计算 第四步
     *
     * @Description
     * @author wpl
     * @since 2020/04/11 15:54:25
     * @return void
     */
    public function set_product_sotck()
    {
        $this->itemplatformsku = new \app\admin\model\itemmanage\ItemPlatformSku;
        $this->item = new \app\admin\model\itemmanage\Item;

        $skus = Db::table('fa_zz_temp2')->column('sku');
        $list = $this->item->field('sku,stock,occupy_stock,available_stock,real_time_qty,distribution_occupy_stock')->where(['sku' => ['in', $skus]])->select();
        foreach ($list as $k => $v) {
            $data['stock'] = $v['real_time_qty'] + $v['distribution_occupy_stock'];
            $data['available_stock'] = ($v['real_time_qty'] + $v['distribution_occupy_stock']) - $v['occupy_stock'];
            $p_map['sku'] = $v['sku'];
            $res = $this->item->where($p_map)->update($data);

            echo $k . "\n";
            usleep(20000);
        }
        echo 'ok';
        die;
    }

    /**
     * 虚拟库存 第五步
     *
     * @Description
     * @author wpl
     * @since 2020/04/11 15:54:25
     * @return void
     */
    public function set_platform_stock()
    {
        $platform = new \app\admin\model\itemmanage\ItemPlatformSku();
        $item = new \app\admin\model\itemmanage\Item();
//        $skus1 = $platform->where(['stock' => ['<', 0]])->column('sku');
        $skus = Db::table('fa_zz_temp2')->column('sku');
        // dump($skus);die;
        foreach ($skus as $k => $v) {
            // $v = 'OA01901-06';
            //同步对应SKU库存
            //更新商品表商品总库存
            //总库存
            $item_map['sku'] = $v;
            $item_map['is_del'] = 1;
            if ($v) {
                $available_stock = $item->where($item_map)->value('available_stock');

                //盘点的时候盘盈入库 盘亏出库 的同时要对虚拟库存进行一定的操作
                //查出映射表中此sku对应的所有平台sku 并根据库存数量进行排序（用于遍历数据的时候首先分配到那个站点）
                $item_platform_sku = $platform->where('sku', $v)->order('stock asc')->field('platform_type,stock')->select();
                if (!$item_platform_sku) {
                    continue;
                }
                $all_num = count($item_platform_sku);
                $whole_num = $platform
                    ->where('sku', $v)
                    ->field('stock')
                    ->select();
                $num_num = 0;
                foreach ($whole_num as $kk => $vv) {
                    $num_num += abs($vv['stock']);
                }
                $stock_num = $available_stock;
                // dump($available_stock);
                // dump($stock_num);

                $stock_all_num = array_sum(array_column($item_platform_sku, 'stock'));
                if ($stock_all_num < 0) {
                    $stock_all_num = 0;
                }
                //如果现有总库存为0 平均分给各站点
                if ($stock_all_num == 0) {
                    $rate_rate = 1 / $all_num;
                    foreach ($item_platform_sku as $key => $val) {
                        //最后一个站点 剩余数量分给最后一个站
                        if (($all_num - $key) == 1) {
                            // dump($stock_num);
                            $platform->where(['sku' => $v, 'platform_type' => $val['platform_type']])->update(['stock' => $stock_num]);
                        } else {
                            $num = round($available_stock * $rate_rate);
                            $stock_num -= $num;
                            // dump($num);
                            $platform->where(['sku' => $v, 'platform_type' => $val['platform_type']])->update(['stock' => $num]);
                        }
                    }
                } else {
                    // echo 1111;die;
                    foreach ($item_platform_sku as $key => $val) {
                        //最后一个站点 剩余数量分给最后一个站
                        if (($all_num - $key) == 1) {
                            $platform->where(['sku' => $v, 'platform_type' => $val['platform_type']])->update(['stock' => $stock_num]);
                        } else {
                            if ($num_num == 0) {
                                $rate_rate = 1 / $all_num;
                                $num_num = round($available_stock * $rate_rate);
                            } else {

                                $num = round($available_stock * abs($val['stock']) / $num_num);
                            }

                            $stock_num -= $num;
                            $platform->where(['sku' => $v, 'platform_type' => $val['platform_type']])->update(['stock' => $num]);
                        }
                    }
                }
            }
            usleep(10000);
            echo $k . "\n";
        }
        echo "ok";
    }

    /************************跑库存数据用END**********************************/


    /**
     * facebook调取用户评论
     *
     * @Description
     * @author wpl
     * @since 2020/11/20 17:31:02 
     * @return void
     */
    public function facebookTest()
    {
        Api::init($this->app_id, $this->app_secret, $this->access_token);

        $all_facebook_spend = 0;
        $accounts = explode(",", $this->accounts);
        foreach ($accounts as $key => $value) {
            $campaign = new Campaign($value);
            $params = [
                'time_range' => ['since' => $start_time, 'until' => $end_time],
            ];
            $cursor = $campaign->getInsights([], $params);
            foreach ($cursor->getObjects() as $key => $value) {
                if ($value) {
                    $all_facebook_spend += $cursor->getObjects()[0]->getData()['spend'];
                }
            }
        }

        return $all_facebook_spend ? round($all_facebook_spend, 2) : 0;
    }


    /**
     * 处理订单日志
     *
     * @Description
     * @author wpl
     * @since 2020/11/28 15:01:15 
     * @return void
     */
    public function process_order_log()
    {
        $order_log = new \app\admin\model\OrderLog();
        $list = $order_log->where(['site' => 2])->select();
        foreach ($list as $k => $v) {
            $arr = explode(',', $v['order_ids']);
            if ($arr[0] < 50000 && $arr[0] > 5000) {
                $order_log->where(['id' => $v['id']])->update(['site' => 3]);
            }
        }
        echo "ok";
    }


    /**
     * 获取前一天有效SKU销量
     * 记录当天有效SKU
     *
     * @Description
     * @author wpl
     * @since 2020/07/31 16:52:46 
     * @return void
     */
    public function get_sku_sales_num()
    {
        ini_set('memory_limit', '512M');
        //记录当天上架的SKU 
        $skuSalesNum = new \app\admin\model\SkuSalesNum();
        $order = new \app\admin\model\order\order\Order();
        //查询昨天上架SKU 并统计当天销量
        $data = $skuSalesNum->where(['createtime' => ['between', ['2020-12-01', '2020-12-02']]])->where('site<>8')->select();
        $data = collection($data)->toArray();
        if ($data) {
            foreach ($data as $k => $v) {
                if ($v['platform_sku']) {
                    $map['a.created_at'] = ['between', [date("Y-m-d 00:00:00", strtotime($v['createtime'])), date("Y-m-d 23:59:59", strtotime($v['createtime']))]];
                    $params[$k]['sales_num'] = $order->getSkuSalesNumTest($v['platform_sku'], $map, $v['site']);
                    $params[$k]['id'] = $v['id'];
                }
                echo $v['id'] . "\n";
                usleep(100000);
            }
            if ($params) {
                $skuSalesNum->saveAll($params);
            }
        }

        echo "ok";
    }

    /**
     * 处理订单节点数据
     *
     * @Description
     * @author wpl
     * @since 2020/12/09 16:24:45 
     * @return void
     */
    public function process_order_node()
    {
        $this->ordernode = new \app\admin\model\OrderNode();
        $this->ordernodedetail = new \app\admin\model\OrderNodeDetail();
        $list = $this->ordernode->where(['shipment_data_type' => '郭伟峰-广州美国专线'])->select();
        $params = [];
        foreach ($list as $k => $v) {
            $create_time = $this->ordernodedetail->where(['order_number' => $v['order_number'], 'site' => $v['site'], 'order_node' => 2, 'node_type' => 7])->order('id asc')->value('create_time');
            $params[$k]['delivery_time'] = $create_time;
            $params[$k]['id'] = $v['id'];
            echo $k . "\n";
        }
        $this->ordernode->saveAll($params);
        echo "ok";
    }


    /**
     * 获取前一天有效SKU销量
     * 记录当天有效SKU
     *
     * @Description
     * @author wpl
     * @since 2020/07/31 16:52:46 
     * @return void
     */
    public function set_sku_sales_num()
    {
        ini_set('memory_limit', '512M');
        //记录当天上架的SKU 
        $skuSalesNum = new \app\admin\model\SkuSalesNum();
        $order = new \app\admin\model\order\order\NewOrder();
        //查询昨天上架SKU 并统计当天销量

        $start = date('Ymd', strtotime("-30 day"));
        $end = date('Ymd', strtotime("-2 day"));
        $where['createtime'] = ['between', [$start, $end]];
        $data = $skuSalesNum->where($where)->where('site<>8')->select();
        $data = collection($data)->toArray();
        if ($data) {
            foreach ($data as $k => $v) {
                $time = ['between', [strtotime(date('Y-m-d 00:00:00', strtotime($v['createtime']))), strtotime(date('Y-m-d 23:59:59', strtotime($v['createtime'])))]];
                if ($v['platform_sku']) {
                    $params[$k]['sales_num'] = $order->getSkuSalesNumShell($v['platform_sku'], $v['site'], $time);
                    $params[$k]['id'] = $v['id'];
                }

                echo $k . "\n";
                usleep(50000);
            }
            if ($params) {
                $skuSalesNum->saveAll($params);
            }
        }
        echo "ok";
    }


    /**
     * 库龄旧数据
     *
     * @Description
     * @author wpl
     * @since 2021/01/28 14:35:19 
     * @return void
     */
    public function stock_time()
    {
        ini_set('memory_limit', '512M');
        $product_barcode = new \app\admin\model\warehouse\ProductBarCodeItem();
        $instock = new \app\admin\model\warehouse\Instock();
        $list = $product_barcode->where(['library_status' => 1, 'in_stock_id' => ['<>', 0]])->where('in_stock_time is null')->limit(100000)->select();
        foreach ($list as $k => $v) {
            //查询入库审核时间
            $check_time = $instock->where(['id' => $v['in_stock_id']])->value('check_time');
            $product_barcode->where(['id' => $v['id']])->update(['in_stock_time' => $check_time]);

            echo $k . "\n";
            usleep(50000);
        }
    }

    /**
     * 退货入库
     *
     * @Description
     * @author wpl
     * @since 2021/02/02 10:32:10 
     * @return void
     */
    public function return_purchase_order()
    {
        //查询退货入库采购单
        $purchase = new \app\admin\model\purchase\PurchaseOrder();
        $list = $purchase->where(['is_in_stock' => 1])->select();
        $purchase_item = new \app\admin\model\purchase\PurchaseOrderItem();

        $params = [];
        foreach ($list as $k => $v) {
            //查询子表商品总价
            $product_price = $purchase_item->where(['purchase_id' => $v['id']])->sum('purchase_price*purchase_num');
            $params[$k]['id'] = $v['id'];
            $params[$k]['product_total'] = $product_price;
            $params[$k]['purchase_total'] = $product_price + $v['purchase_freight'];
        }
        $purchase->saveAll($params);
    }

    /**
     * 跑订单节点最后一条物流数据
     *
     * @Description
     * @author wpl
     * @since 2021/02/20 17:50:13 
     * @return void
     */
    public function order_node()
    {
        ini_set('memory_limit', '512M');
        $ordernode = new \app\admin\model\OrderNode();
        $ordernodecourier = new \app\admin\model\OrderNodeCourier();
        $list = $ordernode->where(['create_time' => ['between', ['2020-11-20 00:00:00', '2021-02-20 00:00:00']]])->where("track_number!=''")->where("shipment_last_msg=''")->select();
        foreach ($list as $k => $v) {
            $content = $ordernodecourier->where(['order_id' => $v['order_id'], 'site' => $v['site']])->order('id desc')->value('content');
            if ($content) {
                $ordernode->where(['id' => $v['id']])->update(['shipment_last_msg' => $content]);
            }
            echo $k . "\n";
            usleep(100000);
        }
        echo 'ok';
    }

    /**
     * 导出sku各站活跃天数销售额
     *
     * @Description
     * @author wpl
     * @since 2021/02/22 10:34:57 
     * @return void
     */
    public function derver_data()
    {
        $this->orderitemprocess = new \app\admin\model\order\order\NewOrderItemProcess();
        $this->itemplatformsku = new \app\admin\model\itemmanage\ItemPlatformSku;
        $this->item = new \app\admin\model\itemmanage\Item;
        $sql = "select sku,site from fa_sku_sales_num where site in (1,2,3) GROUP BY sku,site having count(1) > 30";
        $list = db()->query($sql);
        foreach ($list as $k => $v) {
            if ($v['site'] == 1) {
                $sku = $this->itemplatformsku->getWebSku($v['sku'], 1);
            } elseif ($v['site'] == 2) {
                $sku = $this->itemplatformsku->getWebSku($v['sku'], 2);
            } elseif ($v['site'] == 3) {
                $sku = $this->itemplatformsku->getWebSku($v['sku'], 3);
            }
            $skus = [];
            $skus = [
                $sku,
            ];

            $map['a.sku'] = ['in', array_filter($skus)];
            $map['b.status'] = ['in', ['processing', 'paypal_reversed', 'paypal_canceled_reversal', 'complete', 'delivered']];
            $map['a.distribution_status'] = ['<>', 0]; //排除取消状态
            $map['b.created_at'] = ['between', [strtotime('2021-01-28 00:00:00'), strtotime('2021-02-31 23:59:59')]]; //时间节点
            $map['b.site'] = $v['site'];
            $sales_money = $this->orderitemprocess->alias('a')->where($map)
                ->join(['fa_order' => 'b'], 'a.order_id = b.id')
                ->join(['fa_order_item_option' => 'c'], 'a.order_id = c.order_id and a.option_id = c.id')
                ->sum('c.base_row_total');

            $list[$k]['sales_money'] = $sales_money;
        }
        $headlist = ['sku', '站点', '销售额'];
        Excel::writeCsv($list, $headlist, '12月份sku销量');
        die;
    }

    /**
     * 导出sku各站活跃天数销售额
     *
     * @Description
     * @author wpl
     * @since 2021/02/22 10:34:57 
     * @return void
     */
    public function derver_data2()
    {
        $this->orderitemprocess = new \app\admin\model\order\order\NewOrderItemProcess();
        $this->itemplatformsku = new \app\admin\model\itemmanage\ItemPlatformSku;
        $this->item = new \app\admin\model\itemmanage\Item;
        $sales_num = new \app\admin\model\SkuSalesNum();
        // $sql = "select sku,site from fa_sku_sales_num where site in (1,2,3) GROUP BY sku,site";
        // $list = db()->query($sql);


        $list = $this->item->where(['is_open' => 1, 'is_del' => 1, 'category_id' => ['<>', 43]])->column('sku');
        // $list = $sales_num->field('sku,site')->where(['site' => ['in', [1, 2, 3]], 'sku' => ['in', $sku_list]])->group('sku,site')->select();
        $list = collection($list)->toArray();
        $params = [];
        foreach ($list as $k => $v) {

            // if ($v['site'] == 1) {
            //     $site = $this->itemplatformsku->getWebSku($v['sku'], 1);
            // } elseif ($v['site'] == 2) {
            //     $sku = $this->itemplatformsku->getWebSku($v['sku'], 2);
            // } elseif ($v['site'] == 3) {
            //     $sku = $this->itemplatformsku->getWebSku($v['sku'], 3);
            // } elseif ($v['site'] == 4) {
            //     $sku = $this->itemplatformsku->getWebSku($v['sku'], 4);
            // } elseif ($v['site'] == 5) {
            //     $sku = $this->itemplatformsku->getWebSku($v['sku'], 5);
            // } elseif ($v['site'] == 9) {
            //     $sku = $this->itemplatformsku->getWebSku($v['sku'], 9);
            // } elseif ($v['site'] == 10) {
            //     $sku = $this->itemplatformsku->getWebSku($v['sku'], 10);
            // } elseif ($v['site'] == 11) {
            //     $sku = $this->itemplatformsku->getWebSku($v['sku'], 11);
            // }
            $skus = $this->itemplatformsku->where(['sku' => $v])->column('platform_sku');
            // $skus = [
            //     $sku
            // ];

            //查询开始上架时间
            // $res = db('sku_sales_num')->where(['sku' => $v['sku'], 'site' => $v['site']])->order('createtime asc')->limit(30)->select();
            // if (!$res) {
            //     continue;
            // }
            // $res = array_column($res, 'createtime');
            // $first = $res[0];
            // $last = end($res);
            $map['a.sku'] = ['in', array_filter($skus)];
            $map['b.status'] = ['in', ['processing', 'paypal_reversed', 'paypal_canceled_reversal', 'complete', 'delivered']];
            $map['a.distribution_status'] = ['<>', 0]; //排除取消状态
            $map['b.created_at'] = ['between', [strtotime('2020-12-01 00:00:00'), strtotime('2021-02-31 23:59:59')]]; //时间节点
            // $map['b.site'] = $v['site'];

            $sales_num = $this->orderitemprocess->alias('a')
                ->where($map)
                ->join(['fa_order' => 'b'], 'a.order_id = b.id')
                ->count(1);

            $map['b.created_at'] = ['between', [strtotime('2010-12-01 00:00:00'), strtotime('2021-03-31 23:59:59')]]; //时间节点
            $all_sales_num = $this->orderitemprocess->alias('a')
                ->where($map)
                ->join(['fa_order' => 'b'], 'a.order_id = b.id')
                ->count(1);
            $params[$k]['sku'] = $v;
            $params[$k]['sales_num'] = $sales_num;
            $params[$k]['all_sales_num'] = $all_sales_num;
            // $list[$k]['sales_money'] = $sales_money;
        }
        $headlist = ['sku', '近3个月销量', '历史累计销量'];
        Excel::writeCsv($params, $headlist, 'sku销量');
        die;
    }

    /**
     * 修改禁用状态
     */
    public function edit_product_status()
    {
        //查询库存、在途库存为0的sku 并且其他站点未上架 修改为禁用状态
        $item = new \app\admin\model\itemmanage\Item();
        $itemplatform = new \app\admin\model\itemmanage\ItemPlatformSku();
        $list = $item->where(['available_stock' => 0, 'item_status' => 3, 'on_way_stock' => 0, 'stock' => 0, 'is_open' => 1])->column('sku');
        $skus = [];
        foreach ($list as $k => $v) {
            $count = $itemplatform->where(['sku' => $v, 'outer_sku_status' => 1])->count();
            if ($count > 0) {
                continue;
            } else {
                $skus[] = $v;
            }
        }

        $item->where(['sku' => ['in', $skus]])->update(['is_open' => 2]);
    }

    public function edit_order_status()
    {
        //查询所有子单状态为8的子单
        $orderItem = new \app\admin\model\order\order\NewOrderItemProcess();
        $orderProcess = new \app\admin\model\order\order\NewOrderProcess();
        $worklist = new \app\admin\model\saleaftermanage\WorkOrderList();
        $list = $orderItem->where(['distribution_status' => 8])->select();
        foreach ($list as $k => $v) {
            $allcount = $orderItem->where(['order_id' => $v['order_id']])->count();

            $count = $orderItem->where(['distribution_status' => ['in', [0, 8, 9]], 'order_id' => $v['order_id']])->count();

            //查询工单是否处理完成
            $workcount = $worklist->where(['order_item_numbers' => ['like', '%' . $v['item_order_number'] . '%'], 'work_status' => ['in', [1, 2, 3, 5]]])->count();
            if ($allcount == $count && $workcount < 1) {
                $orderItem->where(['order_id' => $v['order_id'], 'distribution_status' => 8])->update(['distribution_status' => 9]);
                $orderProcess->where(['order_id' => $v['order_id']])->update(['combine_status' => 1, 'combine_time' => time()]);

                echo $v['id'] . "\n";
            }

            usleep(100000);
        }

        echo "ok";
    }


    //跑订单加工分类 - 仅镜架重新跑
    public function order_send_time()
    {
        ini_set('memory_limit', '512M');
        $process = new \app\admin\model\order\order\NewOrderProcess;
        $orderitemprocess = new \app\admin\model\order\order\NewOrderItemProcess();
        //查询所有订单 2月1号
        $order = $process->where('order_prescription_type', 1)->where(['order_id' => ['>', 1197029]])->column('order_id');
        foreach ($order as $key => $value) {
            $order_type = $orderitemprocess->where('order_id', $value)->column('order_prescription_type');
            //查不到结果跳过 防止子单表延迟两分钟查不到数据
            if (!$order_type) {
                continue;
            }

            if (in_array(3, $order_type)) {
                $type = 3;
            } elseif (in_array(2, $order_type)) {
                $type = 2;
            } else {
                $type = 1;
            }
            $process->where('order_id', $value)->update(['order_prescription_type' => $type]);
            echo $value . ' is ok' . "\n";
            usleep(100000);
        }
    }


    /**
     * 处理在途库存 - 更新在途库存
     *
     * @Description
     * @author wpl
     * @since 2020/06/09 10:08:03 
     * @return void
     */
    public function proccess_stock()
    {
        $item = new \app\admin\model\itemmanage\Item();
        $result = $item->where(['is_open' => 1, 'is_del' => 1])->field('sku,id')->select();
        $result = collection($result)->toArray();
        // $skus = array_column($result, 'sku');

        //查询签收的采购单
        $logistics = new \app\admin\model\LogisticsInfo();
        $purchase_id = $logistics->where(['status' => 1, 'purchase_id' => ['>', 0]])->column('purchase_id');
        $purchase = new \app\admin\model\purchase\PurchaseOrder;
        // $res = $purchase->where(['id' => ['in', $purchase_id], 'purchase_status' => 6])->update(['purchase_status' => 7]);
        //计算SKU总采购数量
        $purchase = new \app\admin\model\purchase\PurchaseOrder;
        // $hasWhere['sku'] = ['in', $skus];
        $purchase_map['purchase_status'] = ['in', [2, 5, 6]];
        $purchase_map['is_del'] = 1;
        $purchase_map['PurchaseOrder.id'] = ['not in', $purchase_id];
        $purchase_list = $purchase->hasWhere('purchaseOrderItem')
            ->where($purchase_map)
            ->group('sku')
            ->column('sum(purchase_num) as purchase_num', 'sku');

        foreach ($result as &$v) {
            $v['on_way_stock'] = $purchase_list[$v['sku']] ?? 0;
            unset($v['sku']);
        }
        unset($v);
        $res = $item->saveAll($result);
        die;
    }

    //导出sku库龄数据
    public function derive_list()
    {
        $barcode = new \app\admin\model\warehouse\ProductBarCodeItem();
        $sql = 'select sku,TIMESTAMPDIFF( MONTH, min(in_stock_time), now()) AS total,count(1) as num from fa_product_barcode_item a where library_status = 1 and in_stock_time is not null GROUP BY sku';
        $list = db()->query($sql);
        foreach ($list as $k => $v) {
            $where['i.sku'] = $v['sku'];
            $where['i.library_status'] = 1;
            $total = $barcode->alias('i')->join('fa_purchase_order_item oi', 'i.purchase_id=oi.purchase_id and i.sku=oi.sku')->join('fa_purchase_order o', 'o.id=i.purchase_id')->where($where)->where('in_stock_time is not null')->value('SUM(IF(actual_purchase_price,actual_purchase_price,o.purchase_total/purchase_num)) price');
            $list[$k]['price'] = $total;
        }
        $headlist = ['sku', '库龄', '库存', '库存金额'];
        Excel::writeCsv($list, $headlist, 'sku库龄数据');
        die;
    }


    //导出订单数据
    public function derive_order_data()
    {
        ini_set('memory_limit', '1512M');
        $order = new \app\admin\model\order\Order();
        $lensdata = new \app\admin\model\order\order\LensData();
        $where['a.status'] = ['in', ['processing', 'paypal_reversed', 'paypal_canceled_reversal', 'complete', 'delivered']];
        $where['a.created_at'] = ['between', [strtotime(date('2021-03-01 00:00:00')), strtotime(date('2021-03-25 23:59:59'))]];
        $where['d.is_repeat'] = 0;
        $where['d.is_split'] = 0;
        $list = $order->where($where)->alias('a')->field('a.increment_id,b.item_order_number,b.sku,d.order_prescription_type,prescription_type,web_lens_name,coating_name,od_sph,os_sph,od_cyl,os_cyl,od_axis,os_axis,pd_l,pd_r,pd,os_add,od_add,od_pv,os_pv,od_pv_r,os_pv_r,od_bd,os_bd,od_bd_r,os_bd_r,lens_number')
            ->join(['fa_order_item_process' => 'b'], 'a.id=b.order_id')
            ->join(['fa_order_item_option' => 'c'], 'b.option_id=c.id')
            ->join(['fa_order_process' => 'd'], 'd.order_id=a.id')
            ->select();
        $lenslist = $lensdata->column('lens_name', 'lens_number');
        $params = [];
        foreach ($list as $k => $v) {
            $params[$k]['increment_id'] = $v['increment_id'];
            $params[$k]['item_order_number'] = $v['item_order_number'];
            $params[$k]['sku'] = $v['sku'];
            $str = '';
            if ($v['order_prescription_type'] == 1) {
                $str = '仅镜架';
            } elseif ($v['order_prescription_type'] == 2) {
                $str = '现货处方镜';
            } elseif ($v['order_prescription_type'] == 3) {
                $str = '定制处方镜';
            }

            $params[$k]['order_prescription_type'] = $str;
            $params[$k]['prescription_type'] = $v['prescription_type'];
            $params[$k]['lensname'] = $lenslist[$v['lens_number']];
            $params[$k]['coating_name'] = $v['coating_name'];
            $params[$k]['od_sph'] = $v['od_sph'];
            $params[$k]['os_sph'] = $v['os_sph'];
            $params[$k]['od_cyl'] = $v['od_cyl'];
            $params[$k]['os_cyl'] = $v['os_cyl'];
            $params[$k]['od_axis'] = $v['od_axis'];
            $params[$k]['os_axis'] = $v['os_axis'];
            $params[$k]['pd_r'] = $v['pd_r'];
            $params[$k]['pd_l'] = $v['pd_l'];
            $params[$k]['pd'] = $v['pd'];
            $params[$k]['od_add'] = $v['od_add'];
            $params[$k]['os_add'] = $v['os_add'];
            $params[$k]['od_pv'] = $v['od_pv'];
            $params[$k]['os_pv'] = $v['os_pv'];
            $params[$k]['od_pv_r'] = $v['od_pv_r'];
            $params[$k]['os_pv_r'] = $v['os_pv_r'];
            $params[$k]['od_bd'] = $v['od_bd'];
            $params[$k]['os_bd'] = $v['os_bd'];
            $params[$k]['od_bd_r'] = $v['od_bd_r'];
            $params[$k]['os_bd_r'] = $v['os_bd_r'];
        }

        $headlist = ['订单号', '子单号', 'sku', '加工类型', '处方类型', '镜片名称', '镀膜名称', '右眼SPH', '左眼SPH', '右眼CYL', '左眼CYL', '右眼AXIS', '左眼AXIS', '左眼PD', '右眼PD', 'PD', '右眼ADD', '左眼ADD', '右眼Prism(out/in)', '左眼Prism(out/in)', '右眼Direction(out/in)', '左眼Direction(out/in)', '右眼Prism(up/down)', '左眼Prism(up/down)', '右眼Direction(up/down)', '左眼Direction(up/down)'];
        Excel::writeCsv($params, $headlist, '3月份订单数据');
        die;
    }


    /**
     * 处理库位顺序
     */
    public function process_store_sort()
    {
        $list = db('zz_temp2')->select();
        $storehouse = new \app\admin\model\warehouse\StockHouse();
        foreach ($list as $k => $v) {
            $storehouse->where(['type' => 1, 'area_id' => 3, 'coding' => $v['store_house']])->update(['picking_sort' => $v['sort']]);
        }
    }

    /**
     *  处理采购成本单价
     * @Description
     * @author: wpl
     * @since : 2021/4/1 17:40
     */
    public function getPurchasePrice()
    {
        //查询镜架成本为0的财务数据
        $finace_cost = new \app\admin\model\finance\FinanceCost();
        $barcode = new \app\admin\model\warehouse\ProductBarCodeItem();
        $list = $finace_cost->where(['type' => 2, 'frame_cost' => 0, 'bill_type' => 8])->select();
        $list = collection($list)->toArray();
        $params = [];
        $i = 0;
        foreach ($list as $k => $v) {
            $data = $barcode->alias('a')
                ->where(['item_order_number' => ['like', $v['order_number'] . '%']])
                ->field('a.sku,a.in_stock_id,b.price')
                ->join(['fa_in_stock_item' => 'b'], 'a.in_stock_id=b.in_stock_id and a.sku=b.sku')
                ->select();
            $data = collection($data)->toArray();
            foreach ($data as $key => $val) {
                $params[$i]['order_number'] = $v['order_number'];
                $params[$i]['sku'] = $val['sku'];
                $params[$i]['price'] = $val['price'];
                $i++;
            }
        }
        $headlist = ['订单号', 'sku', '采购成本'];
        Excel::writeCsv($params, $headlist, '采购成本');
        die;
    }

    /**
     *  重新计算三月份财务成本
     * @Description
     * @author: wpl
     * @since : 2021/4/2 11:52
     */
    public function getFinanceCost()
    {
        ini_set('memory_limit', '1512M');
        $finace_cost = new \app\admin\model\finance\FinanceCost();
        $list = $finace_cost->where(['type' => 2, 'bill_type' => 8, 'frame_cost' => 0, 'createtime' => ['>', 1614528000]])->select();
        $params = [];
        foreach ($list as $k => $v) {
            $frame_cost = $this->order_frame_cost($v['order_number']);
            $finace_cost->where(['id' => $v['id']])->update(['frame_cost' => $frame_cost]);
            echo $v['id'] . "\n";
            usleep(100000);
        }
    }

    /**
     *  重新计算三月份财务成本
     * @Description
     * @author: wpl
     * @since : 2021/4/2 11:52
     */
    public function getOrderGrandTotal()
    {
        ini_set('memory_limit', '1512M');
        $finace_cost = new \app\admin\model\finance\FinanceCost();
        $list = $finace_cost->where(['bill_type' => 1, 'income_amount' => 0, 'createtime' => ['>', 1614528000]])->select();
        $order = new \app\admin\model\order\order\NewOrder();
        $params = [];
        foreach ($list as $k => $v) {
            //查询订单支付金额
            $grand_total = $order->where(['increment_id' => $v['order_number'], 'site' => $v['site']])->value('grand_total');
            $finace_cost->where(['id' => $v['id']])->update(['income_amount' => $grand_total, 'order_money' => $grand_total]);
            echo $v['id'] . "\n";
            usleep(100000);
        }
    }

    /**
     *  重新计算三月份财务成本
     * @Description
     * @author: wpl
     * @since : 2021/4/2 11:52
     */
    public function getOrderGrandTotalTwo()
    {
        ini_set('memory_limit', '1512M');
        $finace_cost = new \app\admin\model\finance\FinanceCost();
        $list = $finace_cost->where(['bill_type' => 8, 'income_amount' => 0, 'createtime' => ['>', 1614528000]])->select();
        $order = new \app\admin\model\order\order\NewOrder();
        $params = [];
        foreach ($list as $k => $v) {
            //查询订单支付金额
            $grand_total = $order->where(['increment_id' => $v['order_number'], 'site' => $v['site']])->value('grand_total');
            $finace_cost->where(['id' => $v['id']])->update(['income_amount' => $grand_total, 'order_money' => $grand_total]);
            echo $v['id'] . "\n";
            usleep(100000);
        }
    }

    /**
     * 订单镜架成本
     *
     * @Description
     * @author wpl
     * @since 2021/01/19 18:20:45 
     *
     * @param     [type] $order_id     订单id
     * @param     [type] $order_number 订单号
     *
     * @return void
     */
    protected function order_frame_cost($order_number = null)
    {
        $product_barcode_item = new \app\admin\model\warehouse\ProductBarCodeItem();
        $order_item_process = new \app\admin\model\order\order\NewOrderItemProcess();
        //查询订单子单号
        $item_order_number = $order_item_process
            ->alias('a')
            ->join(['fa_order' => 'b'], 'a.order_id=b.id')
            ->where(['increment_id' => $order_number])
            ->column('item_order_number');

        //判断是否有工单
        $worklist = new \app\admin\model\saleaftermanage\WorkOrderList();

        //查询更改类型为赠品
        $goods_number = $worklist->alias('a')
            ->join(['fa_work_order_change_sku' => 'b'], 'a.id=b.work_id')
            ->where(['platform_order' => $order_number, 'work_status' => 6, 'change_type' => 4])
            ->column('b.goods_number');
        $workcost = 0;
        if ($goods_number) {
            //计算成本
            $workdata = $product_barcode_item->alias('a')->field('purchase_price,actual_purchase_price,c.purchase_total,purchase_num')
                ->where(['code' => ['in', $goods_number]])
                ->join(['fa_purchase_order_item' => 'b'], 'a.purchase_id=b.purchase_id and a.sku=b.sku')
                ->join(['fa_purchase_order' => 'c'], 'a.purchase_id=c.id')
                ->select();
            foreach ($workdata as $k => $v) {
                $workcost += $v['actual_purchase_price'] > 0 ? $v['actual_purchase_price'] : $v['purchase_total'] / $v['purchase_num'];
            }
        }

        //根据子单号查询条形码绑定关系
        $list = $product_barcode_item->alias('a')->field('a.sku,b.price')
            ->where(['item_order_number' => ['in', $item_order_number]])
            ->join(['fa_in_stock_item' => 'b'], 'a.in_stock_id=b.in_stock_id and a.sku=b.sku')
            ->select();
        $list = collection($list)->toArray();
        $allcost = 0;
        $purchase_item = new \app\admin\model\purchase\PurchaseOrderItem();
        foreach ($list as $k => $v) {
            $purchase_price = $v['price'] > 0 ? $v['price'] : $v['price'];
            $allcost += $purchase_price;
        }

        return $allcost + $workcost;
    }


    /**
     * 镜片成本测试
     *
     * @Description
     * @author wpl
     * @since 2021/01/19 16:31:21 
     * @return void
     */
    public function order_lens_cost()
    {
        $order_id = 1388996;
        $order_number = 100232168;
        //判断是否有工单
        $worklist = new \app\admin\model\saleaftermanage\WorkOrderList();
        $workchangesku = new \app\admin\model\saleaftermanage\WorkOrderChangeSku();
        $work_id = $worklist->where(['platform_order' => $order_number, 'work_status' => 6])->order('id desc')->value('id');
        //查询更改类型为更改镜片
        $work_data = $workchangesku->where(['work_id' => $work_id, 'change_type' => 2])
            ->field('od_sph,os_sph,od_cyl,os_cyl,os_add,od_add,lens_number,item_order_number')
            ->select();
        $work_data = collection($work_data)->toArray();
        //工单计算镜片成本
        if ($work_data) {
            $where['item_order_number'] = ['not in', array_column($work_data, 'item_order_number')];
            $lens_number = array_column($work_data, 'lens_number');
            //查询镜片编码对应价格
            $lens_price = new \app\admin\model\lens\LensPrice();
            $lens_list = $lens_price->where(['lens_number' => ['in', $lens_number]])->order('price asc')->select();
            $work_cost = 0;
            foreach ($work_data as $k => $v) {
                $data = [];
                foreach ($lens_list as $key => $val) {
                    $od_temp_cost = 0;
                    $os_temp_cost = 0;
                    //判断子单右眼是否已判断
                    if (!in_array('od' . '-' . $val['lens_number'], $data)) {
                        if ($v['od_cyl'] == '-0.25') {
                            //右眼
                            if ($v['lens_number'] == $val['lens_number'] && ((float)$v['od_sph'] >= (float)$val['sph_start'] && (float)$v['od_sph'] <= (float)$val['sph_end']) && ((float)$v['od_cyl'] == (float)$val['cyl_end'] && (float)$v['od_cyl'] == (float)$val['cyl_end'])) {
                                $work_cost += $val['price'];
                                $od_temp_cost += $val['price'];
                            } elseif ($v['lens_number'] == $val['lens_number'] && ((float)$v['od_sph'] >= (float)$val['sph_start'] && (float)$v['od_sph'] <= (float)$val['sph_end']) && ((float)$v['od_cyl'] >= (float)$val['cyl_start'] && (float)$v['od_cyl'] <= (float)$val['cyl_end'])) {
                                $work_cost += $val['price'];
                                $od_temp_cost += $val['price'];
                            }
                        } else {
                            //右眼
                            if ($v['lens_number'] == $val['lens_number'] && ((float)$v['od_sph'] >= (float)$val['sph_start'] && (float)$v['od_sph'] <= (float)$val['sph_end']) && ((float)$v['od_cyl'] >= (float)$val['cyl_start'] && (float)$v['od_cyl'] <= (float)$val['cyl_end'])) {
                                $work_cost += $val['price'];
                                $od_temp_cost += $val['price'];
                            }
                        }
                        if ($od_temp_cost > 0) {
                            $data[] = 'od' . '-' . $v['lens_number'];
                        }
                    }

                    //判断子单左眼是否已判断
                    if (!in_array('os' . '-' . $val['lens_number'], $data)) {

                        if ($v['os_cyl'] == '-0.25') {
                            //左眼
                            if ($v['lens_number'] == $val['lens_number'] && ((float)$v['os_sph'] >= (float)$val['sph_start'] && (float)$v['os_sph'] <= (float)$val['sph_end']) && ((float)$v['os_cyl'] == (float)$val['cyl_end'] && (float)$v['os_cyl'] == (float)$val['cyl_end'])) {
                                $work_cost += $val['price'];
                                $os_temp_cost += $val['price'];
                            } elseif ($v['lens_number'] == $val['lens_number'] && ((float)$v['os_sph'] >= (float)$val['sph_start'] && (float)$v['os_sph'] <= (float)$val['sph_end']) && ((float)$v['os_cyl'] >= (float)$val['cyl_start'] && (float)$v['os_cyl'] <= (float)$val['cyl_end'])) {
                                $work_cost += $val['price'];
                                $os_temp_cost += $val['price'];
                            }
                        } else {
                            //左眼
                            if ($v['lens_number'] == $val['lens_number'] && ((float)$v['os_sph'] >= (float)$val['sph_start'] && (float)$v['os_sph'] <= (float)$val['sph_end']) && ((float)$v['os_cyl'] >= (float)$val['cyl_start'] && (float)$v['os_cyl'] <= (float)$val['cyl_end'])) {
                                $work_cost += $val['price'];
                                $os_temp_cost += $val['price'];
                            }
                        }

                        if ($os_temp_cost > 0) {
                            $data[] = 'os' . '-' . $v['lens_number'];
                        }
                    }
                }
            }
        }

        //查询处方数据
        $order_item_process = new \app\admin\model\order\order\NewOrderItemProcess();
        $order_prescription = $order_item_process->alias('a')->field('b.od_sph,b.os_sph,b.od_cyl,b.os_cyl,b.os_add,b.od_add,b.lens_number')
            ->where(['a.order_id' => $order_id, 'distribution_status' => 9])
            ->where($where)
            ->join(['fa_order_item_option' => 'b'], 'a.option_id=b.id')
            ->select();

        $order_prescription = collection($order_prescription)->toArray();
        $lens_number = array_column($order_prescription, 'lens_number');
        //查询镜片编码对应价格
        $lens_price = new \app\admin\model\lens\LensPrice();
        $lens_list = $lens_price->where(['lens_number' => ['in', $lens_number]])->order('price asc')->select();
        $cost = 0;

        foreach ($order_prescription as $k => $v) {
            $data = [];
            foreach ($lens_list as $key => $val) {
                $od_temp_cost = 0;
                $os_temp_cost = 0;
                //判断子单右眼是否已判断
                if (!in_array('od' . '-' . $val['lens_number'], $data)) {
                    if ($v['od_cyl'] == '-0.25') {
                        //右眼
                        if ($v['lens_number'] == $val['lens_number'] && ((float)$v['od_sph'] >= (float)$val['sph_start'] && (float)$v['od_sph'] <= (float)$val['sph_end']) && ((float)$v['od_cyl'] == (float)$val['cyl_end'] && (float)$v['od_cyl'] == (float)$val['cyl_end'])) {
                            $cost += $val['price'];
                            $od_temp_cost += $val['price'];
                        } elseif ($v['lens_number'] == $val['lens_number'] && ((float)$v['od_sph'] >= (float)$val['sph_start'] && (float)$v['od_sph'] <= (float)$val['sph_end']) && ((float)$v['od_cyl'] >= (float)$val['cyl_start'] && (float)$v['od_cyl'] <= (float)$val['cyl_end'])) {
                            $cost += $val['price'];
                            $od_temp_cost += $val['price'];
                        }
                    } else {
                        //右眼
                        if ($v['lens_number'] == $val['lens_number'] && ((float)$v['od_sph'] >= (float)$val['sph_start'] && (float)$v['od_sph'] <= (float)$val['sph_end']) && ((float)$v['od_cyl'] >= (float)$val['cyl_start'] && (float)$v['od_cyl'] <= (float)$val['cyl_end'])) {
                            $cost += $val['price'];
                            $od_temp_cost += $val['price'];
                        }
                    }
                    if ($od_temp_cost > 0) {
                        $data[] = 'od' . '-' . $v['lens_number'];
                    }
                }

                //判断子单左眼是否已判断
                if (!in_array('os' . '-' . $val['lens_number'], $data)) {

                    if ($v['os_cyl'] == '-0.25') {
                        //左眼
                        if ($v['lens_number'] == $val['lens_number'] && ((float)$v['os_sph'] >= (float)$val['sph_start'] && (float)$v['os_sph'] <= (float)$val['sph_end']) && ((float)$v['os_cyl'] == (float)$val['cyl_end'] && (float)$v['os_cyl'] == (float)$val['cyl_end'])) {
                            $cost += $val['price'];
                            $os_temp_cost += $val['price'];
                        } elseif ($v['lens_number'] == $val['lens_number'] && ((float)$v['os_sph'] >= (float)$val['sph_start'] && (float)$v['os_sph'] <= (float)$val['sph_end']) && ((float)$v['os_cyl'] >= (float)$val['cyl_start'] && (float)$v['os_cyl'] <= (float)$val['cyl_end'])) {
                            $cost += $val['price'];
                            $os_temp_cost += $val['price'];
                        }
                    } else {
                        //左眼
                        if ($v['lens_number'] == $val['lens_number'] && ((float)$v['os_sph'] >= (float)$val['sph_start'] && (float)$v['os_sph'] <= (float)$val['sph_end']) && ((float)$v['os_cyl'] >= (float)$val['cyl_start'] && (float)$v['os_cyl'] <= (float)$val['cyl_end'])) {
                            $cost += $val['price'];
                            $os_temp_cost += $val['price'];
                        }
                    }

                    if ($os_temp_cost > 0) {
                        $data[] = 'os' . '-' . $v['lens_number'];
                    }
                }
            }
        }

        dump($cost);
        dump($work_cost);
        dump($cost + $work_cost);
        die;
    }

    /**
     * 处理波次单数据
     * @author wpl
     * @date   2021/4/9 14:35
     */
    public function process_wave_data()
    {
        $wave = new \app\admin\model\order\order\WaveOrder();
        $orderItem = new \app\admin\model\order\order\NewOrderItemProcess();
        $list = $wave->where(['status' => 1])->select();
        foreach ($list as $k => $v) {
            //添加波次单打印状态为已打印
            $count = $orderItem->alias('a')
                ->join(['fa_order' => 'b'], 'a.order_id=b.id')
                ->where(['wave_order_id' => $v['id'], 'is_print' => 0, 'distribution_status' => ['<>', 0]])
                ->where(['b.status' => ['in', ['processing', 'paypal_reversed', 'paypal_canceled_reversal', 'complete', 'delivered']]])
                ->count();
            if ($count > 0) {
                $status = 1;
            } elseif ($count == 0) {
                $status = 2;
            }
            $wave->where(['id' => $v['id']])->update(['status' => $status]);
        }
    }

    /**
     * 魔店 SKU选品数据同步处理
     * @package app\admin\controller
     * @author  fzg
     * @date    2021/4/16 17:57
     */
    public function modian_sku(){
        $itemPlatformSku = new Item();

        $arrSkuInfo=['SI371941'
            ,'OP949866'
            ,'DT027351'
            ,'OI318124'
            ,'DI813129'
            ,'DI539757'
            ,'DI188240'
            ,'DI979192'
            ,'DI089496'
            ,'OU454657'
            ,'DI345639'
            ,'OM304256'
            ,'I215848'
            ,'DI257739'
            ,'TT347546'
            ,'DT019440'
            ,'oi694780'
            ,'OI063819'
            ,'DI013744'
            ,'DI000416'
            ,'DI929359'
            ,'TT217878'
            ,'TX122482'
            ,'TM256438'
            ,'GM016699'
            ,'TX687442'
            ,'OT026952'
            ,'OX519935'
            ,'OX543294'
            ,'SP020730'
            ,'OP704153'
            ,'ON035814'
            ,'OM449670'
            ,'OP053149'
            ,'OP626492'
            ,'OP119687'
            ,'DI139853'
            ,'OX035445'
            ,'DI072199'
            ,'OT485292'
            ,'OM138826'
            ,'OM119551'
            ,'OX090269'
            ,'DI025760'
            ,'OI611693'
            ,'SP526418'
            ,'OX591569'
            ,'OT663524'
            ,'OT011656'
            ,'TX548130'
            ,'DI656279'
            ,'OX154394'
            ,'OX687338'
            ,'FM0125'
            ,'OM341662'
            ,'DM473233'
            ,'DX163241'
            ,'OM367912'
            ,'DI906936'
            ,'DI765717'
            ,'DI359079'
            ,'DT829273'
            ,'TT751899'
            ,'GM137973'
            ,'OX627120'
            ,'TX893639'
            ,'TX531583'
            ,'DX883751'
            ,'DI151559'
            ,'GM119026'
            ,'DI046658'
            ,'OM777828'
            ,'TX742894'
            ,'OI611693'
            ,'TX898397'
            ,'TX599374'
            ,'GM503870'
            ,'DX261370'
            ,'OI986882'
            ,'OI003342'
            ,'TM625894'
            ,'SM241073'
            ,'SM103749'
            ,'SM016807'
            ,'SM901394'
            ,'OM777679'
            ,'TM329140'
            ,'TT256753'
            ,'TT123484'
            ,'OT465170'];

        foreach ($arrSkuInfo as $skuK=>$skuV){
            $wheLike['sku'] = ['like',$skuV.'%'];
            $sku=$itemPlatformSku
                ->where($wheLike)
                ->select();
            foreach ($sku as $insetK=>$insetV){
                $save['sku']=$insetV['sku'];
                Db::name('temp_sku')->insert($save);
            }
        }

    }



}
