<?php
/**
 * Class SkuDetailNew.php
 * @package app\admin\controller\operatedatacenter\orderdata
 * @author  crasphb
 * @date    2021/5/12 14:33
 */

namespace app\admin\controller\operatedatacenter\orderdata;


use app\admin\model\order\OrderItemOption;
use app\common\controller\Backend;
use PhpOffice\PhpSpreadsheet\Spreadsheet;
use think\Db;

class SkuDetailNew extends Backend
{
    protected $relationSearch = true;
    protected $noNeedRight = ['*'];
    public function _initialize()
    {
        return parent::_initialize(); // TODO: Change the autogenerated stub
    }

    /**
     * sku明细分析
     *
     * @return \think\Response
     */
    public function index()
    {
        //设置过滤方法
        $this->request->filter(['strip_tags']);
        if ($this->request->isAjax()) {
            $filter = json_decode($this->request->get('filter'), true);
            //如果发送的来源是Selectpage，则转发到Selectpage
            if ($this->request->request('keyField')) {
                return $this->selectpage();
            }
            if ($filter['time_str']) {
                $createat = explode(' ', $filter['time_str']);
                $begin = strtotime($createat[0]);
                $end = strtotime($createat[3] . ' 23:59:59');
            } else {
                if (isset($filter['time_str'])) {
                    unset($filter['time_str']);
                    $this->request->get(['filter' => json_encode($filter)]);
                }
                $begin = strtotime(date('Y-m-d', strtotime('-6 day')));
                $end = strtotime(date('Y-m-d 23:59:59'));

            }
            if ($filter['order_platform']) {
                $site = $filter['order_platform'];
            } else {
                $site = 1;
            }
            $sku = $filter['sku'] ?? '';
            $whereSku = [];
            if($sku) {
                $whereSku['a.sku'] = $sku;
            }

            list($where, $sort, $order, $offset, $limit) = $this->buildparams();
            $total = Db::connect('database.db_mojing_order')->table('fa_order_item_option')
                ->alias('a')
                ->join(['fa_order'=>'b'],'b.id= a.order_id')
                ->where([
                    'b.payment_time' => ['between', [$begin, $end]],
                    'b.status' => ['in', ['free_processing', 'processing', 'complete', 'paypal_reversed', 'payment_review', 'paypal_canceled_reversal', 'delivered','delivery']],
                    'b.order_type' => 1
                ])
                ->where(['a.site' => $site])
                ->where($whereSku)
                ->field('a.*,b.increment_id,b.customer_email,b.payment_time,b.id as bid')
                ->count();
            $list = Db::connect('database.db_mojing_order')->table('fa_order_item_option')
                ->alias('a')
                ->join(['fa_order'=>'b'],'b.id= a.order_id')
                ->where([
                    'b.payment_time' => ['between', [$begin, $end]],
                    'b.status' => ['in', ['free_processing', 'processing', 'complete', 'paypal_reversed', 'payment_review', 'paypal_canceled_reversal', 'delivered','delivery']],
                    'b.order_type' => 1
                ])
                ->where(['a.site' => $site])
                ->where($whereSku)
                ->field('a.*,b.increment_id,b.customer_email,b.payment_time,b.id as bid')
                ->order($sort, $order)
                ->limit($offset, $limit)
                ->select();
            $order = [];
            foreach ($list as $key => $val) {
                $order[$key]['id'] = $offset + $key + 1;
                $order[$key]['sku'] = $val['sku'];
                $order[$key]['prescription_type'] = $val['prescription_type'];
                $order[$key]['coating_name'] = $val['coating_name'];
                $order[$key]['frame_price'] = $val['frame_price'];
                $order[$key]['increment_id'] = $val['increment_id'];
                $order[$key]['customer_email'] = $val['customer_email'];
                $order[$key]['payment_time'] = date('Y-m-d H:i:s',$val['payment_time']);
                $order[$key]['frame_price'] = round($val['frame_price'], 2);
                $order[$key]['index_price'] = round($val['index_price'], 2);
            }
            $result = ["total" => $total, "rows" => $order];

            return json($result);
        }
        $this->magentoplatform = new \app\admin\model\platformmanage\MagentoPlatform();
        //查询对应平台权限
        $magentoplatformarr = $this->magentoplatform->getAuthSite();
        foreach ($magentoplatformarr as $key => $val) {
            if (!in_array($val['name'], ['zeelool', 'voogueme', 'meeloog', 'zeelool_de', 'zeelool_jp', 'wesee', 'zeelool_fr'])) {
                unset($magentoplatformarr[$key]);
            }
        }
        $this->view->assign('magentoplatformarr', $magentoplatformarr);

        return $this->view->fetch();
    }

    /**
     * 导出
     * @throws \PhpOffice\PhpSpreadsheet\Exception
     * @throws \PhpOffice\PhpSpreadsheet\Writer\Exception
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     * @author crasphb
     * @date   2021/5/12 21:56
     */
    public function export()
    {
        set_time_limit(0);
        ini_set('memory_limit', '512M');
        $site = input('order_platform');
        $timeStr = input('time_str');
        $sku = input('sku','');
        $createat = explode(' ', $timeStr);
        $begin = strtotime($createat[0]);
        $end = strtotime($createat[3] . ' 23:59:59');
        $whereSku['a.sku'] = $sku;
        $list = Db::connect('database.db_mojing_order')->table('fa_order_item_option')
            ->alias('a')
            ->join(['fa_order'=>'b'],'b.id= a.order_id')
            ->where([
                'b.payment_time' => ['between', [$begin, $end]],
                'b.status' => ['in', ['free_processing', 'processing', 'complete', 'paypal_reversed', 'payment_review', 'paypal_canceled_reversal', 'delivered','delivery']],
                'b.order_type' => 1
            ])
            ->where(['a.site' => $site])
            ->where($whereSku)
            ->field('a.*,b.increment_id,b.customer_email,b.payment_time,b.id as bid')
            ->select();
        $order = [];
        $i = 0;
        foreach ($list as $key => $val) {
            $order[$i]['id'] = $key + 1;
            $order[$i]['sku'] = $val->sku;
            $order[$i]['increment_id'] = $val->order->increment_id;
            $order[$i]['payment_time'] = date('Y-m-d H:i:s',$val->order->payment_time);
            $order[$i]['customer_email'] = $val->order->customer_email;
            $order[$i]['prescription_type'] = $val->prescription_type;
            $order[$i]['coating_name'] = $val->coating_name;
            $order[$i]['frame_price'] = round($val['frame_price'], 2);
            $order[$i]['index_price'] = round($val['index_price'], 2);
            $i++;
        }
        //从数据库查询需要的数据
        $spreadsheet = new Spreadsheet();
        $spreadsheet->setActiveSheetIndex(0);
        $spreadsheet->getActiveSheet()->setCellValue("A1", "序号");
        $spreadsheet->getActiveSheet()->setCellValue("B1", "Sku");
        $spreadsheet->getActiveSheet()->setCellValue("C1", "订单号");
        $spreadsheet->getActiveSheet()->setCellValue("D1", "订单时间");
        $spreadsheet->getActiveSheet()->setCellValue("E1", "支付邮箱");
        $spreadsheet->getActiveSheet()->setCellValue("F1", "处方类型");
        $spreadsheet->getActiveSheet()->setCellValue("G1", "镀膜类型");
        $spreadsheet->getActiveSheet()->setCellValue("H1", "镜框价格");
        $spreadsheet->getActiveSheet()->setCellValue("I1", "镜片价格");


        $spreadsheet->setActiveSheetIndex(0)->setTitle('SKU明细');
        $spreadsheet->setActiveSheetIndex(0);
        foreach ($order as $k=>$v){
            $spreadsheet->getActiveSheet()->setCellValue('A' . ($k * 1 + 2), $v['id']);
            $spreadsheet->getActiveSheet()->setCellValue('B' . ($k * 1 + 2), $v['sku']);
            $spreadsheet->getActiveSheet()->setCellValue('C' . ($k * 1 + 2), $v['increment_id']);
            $spreadsheet->getActiveSheet()->setCellValue('D' . ($k * 1 + 2), $v['payment_time']);
            $spreadsheet->getActiveSheet()->setCellValue('E' . ($k * 1 + 2), $v['customer_email']);
            $spreadsheet->getActiveSheet()->setCellValue('F' . ($k * 1 + 2), $v['prescription_type']);
            $spreadsheet->getActiveSheet()->setCellValue('G' . ($k * 1 + 2), $v['coating_name']);
            $spreadsheet->getActiveSheet()->setCellValue('H' . ($k * 1 + 2), $v['frame_price']);
            $spreadsheet->getActiveSheet()->setCellValue('I' . ($k * 1 + 2), $v['index_price']);
        }
        //设置边框
        $border = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => \PhpOffice\PhpSpreadsheet\Style\Border::BORDER_THIN, // 设置border样式
                    'color'       => ['argb' => 'FF000000'], // 设置border颜色
                ],
            ],
        ];
        $spreadsheet->getDefaultStyle()->getFont()->setName('微软雅黑')->setSize(12);
        $setBorder = 'A1:' . $spreadsheet->getActiveSheet()->getHighestColumn() . $spreadsheet->getActiveSheet()->getHighestRow();
        $spreadsheet->getActiveSheet()->getStyle($setBorder)->applyFromArray($border);

        $spreadsheet->getActiveSheet()->getStyle('A1:Q' . $spreadsheet->getActiveSheet()->getHighestRow())->getAlignment()->setHorizontal(\PhpOffice\PhpSpreadsheet\Style\Alignment::HORIZONTAL_CENTER);

        $spreadsheet->setActiveSheetIndex(0);
        $format = 'xlsx';
        $savename = '订单数据' . date("YmdHis", time());;

        if ($format == 'xls') {
            //输出Excel03版本
            header('Content-Type:application/vnd.ms-excel');
            $class = "\PhpOffice\PhpSpreadsheet\Writer\Xls";
        } elseif ($format == 'xlsx') {
            //输出07Excel版本
            header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
            $class = "\PhpOffice\PhpSpreadsheet\Writer\Xlsx";
        }
        //输出名称
        header('Content-Disposition: attachment;filename="' . $savename . '.' . $format . '"');
        //禁止缓存
        header('Cache-Control: max-age=0');
        $writer = new $class($spreadsheet);
        $writer->save('php://output');
    }
}